{
	"information_for_contributors": [
		"This file has been converted from https://github.com/Microsoft/vscode/blob/master/extensions/ruby/syntaxes/ruby.tmLanguage.json",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/Microsoft/vscode/blob/8fdf170a0850c1cc027382f31650aaf300d3ae2a/extensions/ruby/syntaxes/ruby.tmLanguage.json",
	"name": "Crystal",
	"fileTypes": [
		"cr"
	],
	"scopeName": "source.crystal",
	"firstLineMatch": "^#!\/.*\\bcrystal",
	"foldingStartMarker": "(?x)^(\\s*+(module|class|def(?!.*\\bend\\s*$)|unless|if|case|begin|for|while|until|^=begin|(\"(\\\\.|[^\"])*+\"|'(\\\\.|[^'])*+'|[^#\"'])*(\\s(do|begin|case)|(?<!\\$)[-+=&|*\/~%^<>~]\\s*+(if|unless)))\\b(?![^;]*+;.*?\\bend\\b)|(\"(\\\\.|[^\"])*+\"|'(\\\\.|[^'])*+'|[^#\"'])*(\\{(?![^}]*+\\})|\\[(?![^\\]]*+\\]))).*$|[#].*?\\(fold\\)\\s*+$",
	"foldingStopMarker": "(?x)((^|;)\\s*+end\\s*+([#].*)?$|(^|;)\\s*+end\\..*$|^\\s*+[}\\]] ,?\\s*+([#].*)?$|[#].*?\\(end\\)\\s*+$|^=end)",
	"keyEquivalent": "^~R",
	"patterns": [
		{
			"captures": {
				"1": {
					"name": "keyword.control.class.crystal"
				},
				"2": {
					"name": "keyword.control.class.crystal"
				},
				"3": {
					"name": "entity.name.type.class.crystal"
				},
				"5": {
					"name": "punctuation.separator.crystal"
				},
				"6": {
					"name": "support.class.other.type-param.crystal"
				},
				"7": {
					"name": "entity.other.inherited-class.crystal"
				},
				"8": {
					"name": "punctuation.separator.crystal"
				},
				"9": {
					"name": "punctuation.separator.crystal"
				},
				"10": {
					"name": "support.class.other.type-param.crystal"
				},
				"11": {
					"name": "punctuation.definition.variable.crystal"
				}
			},
			"match": "(?x)^\\s*(abstract)?\\s*(class|struct|union)\\s+(([.A-Z_:\\x{80}-\\x{10FFFF}][.\\w:\\x{80}-\\x{10FFFF}]*(\\(([,\\s.a-zA-Z0-9_:\\x{80}-\\x{10FFFF}]+)\\))?(\\s*(<)\\s*[.:A-Z\\x{80}-\\x{10FFFF}][.:\\w\\x{80}-\\x{10FFFF}]*(\\(([.a-zA-Z0-9_:]+\\s,)\\))?)?)|((<<)\\s*[.A-Z0-9_:\\x{80}-\\x{10FFFF}]+))",
			"name": "meta.class.crystal"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.module.crystal"
				},
				"2": {
					"name": "entity.name.type.module.crystal"
				},
				"3": {
					"name": "entity.other.inherited-class.module.first.crystal"
				},
				"4": {
					"name": "punctuation.separator.inheritance.crystal"
				},
				"5": {
					"name": "entity.other.inherited-class.module.second.crystal"
				},
				"6": {
					"name": "punctuation.separator.inheritance.crystal"
				},
				"7": {
					"name": "entity.other.inherited-class.module.third.crystal"
				},
				"8": {
					"name": "punctuation.separator.inheritance.crystal"
				}
			},
			"match": "^\\s*(module)\\s+(([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(::))?([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(::))?([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(::))*[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*)",
			"name": "meta.module.crystal"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.hashkey.crystal"
				}
			},
			"comment": "symbols as hash key (1.9 syntax)",
			"match": "(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)",
			"name": "constant.language.symbol.hashkey.crystal"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.crystal"
				}
			},
			"comment": "symbols as hash key (1.8 syntax)",
			"match": "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!])?)(?=\\s*=>)",
			"name": "constant.language.symbol.hashkey.crystal"
		},
		{
			"comment": "everything being a reserved word, not a value and needing a 'end' is a..",
			"match": "(?<!\\.)\\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\\b(?![?!])",
			"name": "keyword.control.crystal"
		},
		{
			"comment": "contextual smart pair support for block parameters",
			"match": "(?<!\\.)\\bdo\\b\\s*",
			"name": "keyword.control.start-block.crystal"
		},
		{
			"comment": "contextual smart pair support",
			"match": "(?<=\\{)(\\s+)",
			"name": "meta.syntax.crystal.start-block"
		},
		{
			"match": "(?<!\\.)\\b(break|next|redo|retry|return|super|yield)\\b(?![?!])|\\bdefined\\?|\\b(block_given|iterator)\\?",
			"name": "keyword.control.pseudo-method.crystal"
		},
		{
			"match": "\\bnil\\b(?![?!])",
			"name": "constant.language.nil.crystal"
		},
		{
			"match": "\\b(true|false)\\b(?![?!])",
			"name": "constant.language.boolean.crystal"
		},
		{
			"match": "\\b(__(FILE|LINE|DIR)__)\\b(?![?!])",
			"name": "variable.language.crystal"
		},
		{
			"match": "\\bself\\b(?![?!])",
			"name": "variable.language.self.crystal"
		},
		{
			"comment": "everything being a method but having a special function is a..",
			"match": "\\b(initialize|new|loop|include|extend|getter|setter|property|class_getter|class_setter|class_property|describe|it|with|delegate|def_hash|def_equals|def_equals_and_hash|forward_missing_to|record|assert_responds_to|alias)\\b[!?]?",
			"name": "keyword.control.special-method.crystal"
		},
		{
			"begin": "\\b(require)\\b",
			"captures": {
				"1": {
					"name": "keyword.control.special-method.crystal"
				}
			},
			"end": "$|(?=#)",
			"name": "meta.require.crystal",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.crystal"
				}
			},
			"match": "(@)[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*[?!=]?",
			"name": "variable.other.readwrite.instance.crystal"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.crystal"
				}
			},
			"match": "(@@)[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*[?!=]?",
			"name": "variable.other.readwrite.class.crystal"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.crystal"
				}
			},
			"match": "(\\$)[a-zA-Z_]\\w*",
			"name": "variable.other.readwrite.global.crystal"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.crystal"
				}
			},
			"match": "(\\$)(!|@|&|`|'|\\+|\\d+|~|=|/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|\"|-[0adFiIlpv])",
			"name": "variable.other.readwrite.global.pre-defined.crystal"
		},
		{
			"begin": "\\b(ENV)\\[",
			"beginCaptures": {
				"1": {
					"name": "variable.other.constant.crystal"
				}
			},
			"end": "]",
			"name": "meta.environment-variable.crystal",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"match": "\\b[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*",
			"name": "support.class.crystal"
		},
		{
			"match": "\\b(abort|at_exit|caller|delay|exit|fork|future|lazy|loop|main|p|pp|print|printf|puts|rand|read_line|sleep|spawn|sprintf|system|with_color|debugger|record)\\b[!?]?",
			"name": "support.function.kernel.crystal",
			"comment": "Fetch from https://crystal-lang.org/api/0.27.0/toplevel.html"
		},
		{
			"match": "\\b[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*\\b",
			"name": "variable.other.constant.crystal"
		},
		{
			"begin": "(?x)\n(?=def\\b)                          # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\s+\n(\n  (?>[a-zA-Z_]\\w*(?>\\.|::))?      # method prefix\n  (?>                               # method name\n    [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n    |\n    \\^|===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[][?=]?|\\[]=?\n  )\n)\n\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.def.crystal"
				},
				"2": {
					"name": "entity.name.function.crystal"
				},
				"3": {
					"name": "punctuation.definition.parameters.crystal"
				}
			},
			"comment": "The method pattern comes from the symbol pattern. See there for an explanation.",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.crystal"
				}
			},
			"name": "meta.function.method.with-arguments.crystal",
			"patterns": [
				{
					"begin": "(?![\\s,)])",
					"end": "(?=,|\\)\\s*$)",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "storage.type.variable.crystal"
								},
								"2": {
									"name": "constant.language.symbol.hashkey.parameter.function.crystal"
								},
								"3": {
									"name": "punctuation.definition.constant.hashkey.crystal"
								},
								"4": {
									"name": "variable.parameter.function.crystal"
								}
							},
							"match": "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n(?=def\\b)                          # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\s+\n(\n  (?>[a-zA-Z_]\\w*(?>\\.|::))?      # method prefix\n  (?>                               # method name\n    [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n    |\n    \\^|===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[][?=]?|\\[]=?\n  )\n)\n[ \\t]\n(?=[ \\t]*[^\\s#;])                 # make sure the following is not comment",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.def.crystal"
				},
				"2": {
					"name": "entity.name.function.crystal"
				}
			},
			"comment": "same as the previous rule, but without parentheses around the arguments",
			"end": "$",
			"name": "meta.function.method.with-arguments.crystal",
			"patterns": [
				{
					"begin": "(?![\\s,])",
					"end": "(?=,|$)",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "storage.type.variable.crystal"
								},
								"2": {
									"name": "constant.language.symbol.hashkey.parameter.function.crystal"
								},
								"3": {
									"name": "punctuation.definition.constant.hashkey.crystal"
								},
								"4": {
									"name": "variable.parameter.function.crystal"
								}
							},
							"match": "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.def.crystal"
				},
				"3": {
					"name": "entity.name.function.crystal"
				}
			},
			"comment": " the optional name is just to catch the def also without a method-name",
			"match": "(?x)\n(?=def\\b)                            # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\b\n(\n  \\s+\n  (\n    (?>[a-zA-Z_]\\w*(?>\\.|::))?      # method prefix\n    (?>                               # method name\n      [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n      |\n      \\^|===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[][?=]?|\\[]=?\n    )\n  )\n)?",
			"name": "meta.function.method.without-arguments.crystal"
		},
		{
			"match": "(?x)\n\\b\n(\n  [\\d](?>_?\\d)*                             # 100_000\n  (\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?   # fractional part\n  ([eE][-+]?\\d(?>_?\\d)*)?                   # 1.23e-4\n  |\n  0\n  (?:\n    [xX]\\h(?>_?\\h)*|\n    [oO]?[0-7](?>_?[0-7])*|\n    [bB][01](?>_?[01])*|\n    [dD]\\d(?>_?\\d)*\n  )                                           # A base indicator can only be used with an integer\n)\\b",
			"name": "constant.numeric.crystal"
		},
		{
			"begin": ":'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.crystal"
				}
			},
			"comment": "symbol literal with '' delimitor",
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\['\\\\]",
					"name": "constant.character.escape.crystal"
				}
			]
		},
		{
			"begin": ":\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.symbol.begin.crystal"
				}
			},
			"comment": "symbol literal with \"\" delimitor",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"comment": "Needs higher precidence than regular expressions.",
			"match": "(?<!\\()/=",
			"name": "keyword.operator.assignment.augmented.crystal"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"comment": "string literal with '' delimitor",
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.single.crystal",
			"patterns": [
				{
					"match": "\\\\'|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				}
			]
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"comment": "string literal with interpolation and \"\" delimitor",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.double.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"comment": "execute string (allows for interpolation)",
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "(?x)\n(?<![\\w)])((/))(?![?*+])\n(?=\n  (?:\\\\/|[^/])*+          # Do NOT change the order\n  /[eimnosux]*\\s*\n  (?:\n    [)\\]}#.,?:]|\\|\\||&&|<=>|=>|==|=~|!~|!=|;|$|\n    if|else|elsif|then|do|end|unless|while|until|or|and\n  )\n  |\n  $\n)",
			"captures": {
				"1": {
					"name": "string.regexp.interpolated.crystal"
				},
				"2": {
					"name": "punctuation.section.regexp.crystal"
				}
			},
			"comment": "regular expression literal with interpolation",
			"contentName": "string.regexp.interpolated.crystal",
			"end": "((/[eimnosux]*))",
			"patterns": [
				{
					"include": "#regex_sub"
				}
			]
		},
		{
			"begin": "%r{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.regexp.begin.crystal"
				}
			},
			"end": "}[eimnosux]*",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.regexp.end.crystal"
				}
			},
			"name": "string.regexp.interpolated.crystal",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_curly_r"
				}
			]
		},
		{
			"begin": "%r\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.regexp.begin.crystal"
				}
			},
			"end": "][eimnosux]*",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.regexp.end.crystal"
				}
			},
			"name": "string.regexp.interpolated.crystal",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_brackets_r"
				}
			]
		},
		{
			"begin": "%r\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.regexp.begin.crystal"
				}
			},
			"end": "\\)[eimnosux]*",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.regexp.end.crystal"
				}
			},
			"name": "string.regexp.interpolated.crystal",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_parens_r"
				}
			]
		},
		{
			"begin": "%r<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.regexp.begin.crystal"
				}
			},
			"end": ">[eimnosux]*",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.regexp.end.crystal"
				}
			},
			"name": "string.regexp.interpolated.crystal",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_ltgt_r"
				}
			]
		},
		{
			"begin": "%r([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.regexp.begin.crystal"
				}
			},
			"end": "\\1[eimnosux]*",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.regexp.end.crystal"
				}
			},
			"name": "string.regexp.interpolated.crystal",
			"patterns": [
				{
					"include": "#regex_sub"
				}
			]
		},
		{
			"begin": "%I\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_brackets_i"
				}
			]
		},
		{
			"begin": "%I\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_parens_i"
				}
			]
		},
		{
			"begin": "%I<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_ltgt_i"
				}
			]
		},
		{
			"begin": "%I{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_curly_i"
				}
			]
		},
		{
			"begin": "%I([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "%i\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\]|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_brackets"
				}
			]
		},
		{
			"begin": "%i\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\\\)|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_parens"
				}
			]
		},
		{
			"begin": "%i<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\>|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_ltgt"
				}
			]
		},
		{
			"begin": "%i{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\}|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_curly"
				}
			]
		},
		{
			"begin": "%i([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"comment": "Cant be named because its not neccesarily an escape.",
					"match": "\\\\."
				}
			]
		},
		{
			"begin": "%W\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_brackets_i"
				}
			]
		},
		{
			"begin": "%W\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_parens_i"
				}
			]
		},
		{
			"begin": "%W<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_ltgt_i"
				}
			]
		},
		{
			"begin": "%W{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_curly_i"
				}
			]
		},
		{
			"begin": "%W([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "%w\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\]|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_brackets"
				}
			]
		},
		{
			"begin": "%w\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\\\)|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_parens"
				}
			]
		},
		{
			"begin": "%w<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\>|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_ltgt"
				}
			]
		},
		{
			"begin": "%w{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\}|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_curly"
				}
			]
		},
		{
			"begin": "%w([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"comment": "Cant be named because its not neccesarily an escape.",
					"match": "\\\\."
				}
			]
		},
		{
			"begin": "%[Qx]?\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_parens_i"
				}
			]
		},
		{
			"begin": "%[Qx]?\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_brackets_i"
				}
			]
		},
		{
			"begin": "%[Qx]?{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_curly_i"
				}
			]
		},
		{
			"begin": "%[Qx]?<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_ltgt_i"
				}
			]
		},
		{
			"begin": "%[Qx]([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "%([^\\w\\s=])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.interpolated.crystal",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "%q\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\\\)|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_parens"
				}
			]
		},
		{
			"begin": "%q<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\>|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_ltgt"
				}
			]
		},
		{
			"begin": "%q\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\]|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_brackets"
				}
			]
		},
		{
			"begin": "%q{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"match": "\\\\}|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_curly"
				}
			]
		},
		{
			"begin": "%q([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.quoted.other.crystal",
			"patterns": [
				{
					"comment": "Cant be named because its not neccesarily an escape.",
					"match": "\\\\."
				}
			]
		},
		{
			"begin": "%s\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.crystal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\\\)|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_parens"
				}
			]
		},
		{
			"begin": "%s<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.crystal"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\>|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_ltgt"
				}
			]
		},
		{
			"begin": "%s\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.crystal"
				}
			},
			"end": "]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\]|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_brackets"
				}
			]
		},
		{
			"begin": "%s{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.crystal"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"match": "\\\\}|\\\\\\\\",
					"name": "constant.character.escape.crystal"
				},
				{
					"include": "#nest_curly"
				}
			]
		},
		{
			"begin": "%s([^\\w])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.crystal"
				}
			},
			"end": "\\1",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.crystal"
				}
			},
			"name": "constant.language.symbol.crystal",
			"patterns": [
				{
					"comment": "Cant be named because its not neccesarily an escape.",
					"match": "\\\\."
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.crystal"
				}
			},
			"comment": "symbols",
			"match": "(?x)\n(?<!:)(:)\n(?>\n  [$a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?\n  |\n  ===?|<=>|>[>=]?|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n  |\n  @@?[a-zA-Z_]\\w*\n)",
			"name": "constant.language.symbol.crystal"
		},
		{
			"begin": "^=begin",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.crystal"
				}
			},
			"comment": "multiline comments",
			"end": "^=end",
			"name": "comment.block.documentation.crystal"
		},
		{
			"begin": "(^[ \\t]+)?(?=#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.crystal"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.crystal"
						}
					},
					"end": "\\n",
					"name": "comment.line.number-sign.crystal"
				}
			]
		},
		{
			"comment": "\n\t\t\tmatches questionmark-letters.\n\n\t\t\texamples (1st alternation = hex):\n\t\t\t?\\x1     ?\\x61\n\n\t\t\texamples (2nd alternation = octal):\n\t\t\t?\\0      ?\\07     ?\\017\n\n\t\t\texamples (3rd alternation = escaped):\n\t\t\t?\\n      ?\\b\n\n\t\t\texamples (4th alternation = meta-ctrl):\n\t\t\t?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a\n\n\t\t\texamples (4th alternation = normal):\n\t\t\t?a       ?A       ?0 \n\t\t\t?*       ?\"       ?( \n\t\t\t?.       ?#\n\t\t\t\n\t\t\t\n\t\t\tthe negative lookbehind prevents against matching\n\t\t\tp(42.tainted?)\n\t\t\t",
			"match": "(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])",
			"name": "constant.numeric.crystal"
		},
		{
			"begin": "^__END__\\n",
			"captures": {
				"0": {
					"name": "string.unquoted.program-block.crystal"
				}
			},
			"comment": "__END__ marker",
			"contentName": "text.plain",
			"end": "(?=not)impossible",
			"patterns": [
				{
					"begin": "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))",
					"end": "(?=not)impossible",
					"name": "text.html.embedded.crystal",
					"patterns": [
						{
							"include": "text.html.basic"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)HTML)\\b\\1))",
			"comment": "Heredoc with embedded html",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.html",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)HTML)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "text.html",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "text.html.basic"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)XML)\\b\\1))",
			"comment": "Heredoc with embedded xml",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.xml",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)XML)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "text.xml",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "text.xml"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)SQL)\\b\\1))",
			"comment": "Heredoc with embedded sql",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.sql",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)SQL)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.sql",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.sql"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)GRAPHQL)\\b\\1))",
			"comment": "Heredoc with embedded GraphQL",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.graphql",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)GRAPHQL)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.graphql",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.graphql"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)CSS)\\b\\1))",
			"comment": "Heredoc with embedded css",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.css",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)CSS)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.css",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.css"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)CPP)\\b\\1))",
			"comment": "Heredoc with embedded c++",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.cpp",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)CPP)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.cpp",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.cpp"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)C)\\b\\1))",
			"comment": "Heredoc with embedded c",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.c",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)C)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.c",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.c"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1))",
			"comment": "Heredoc with embedded javascript",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.js",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.js",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.js"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)JQUERY)\\b\\1))",
			"comment": "Heredoc with embedded jQuery javascript",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.js.jquery",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)JQUERY)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.js.jquery",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.js.jquery"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1))",
			"comment": "Heredoc with embedded shell",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.shell",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.shell",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.shell"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)LUA)\\b\\1))",
			"comment": "Heredoc with embedded lua",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.lua",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)LUA)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.lua",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.lua"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)RUBY)\\b\\1))",
			"comment": "Heredoc with embedded ruby",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.crystal",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)RUBY)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.crystal"
						}
					},
					"contentName": "source.crystal",
					"end": "^\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.crystal"
						}
					},
					"name": "string.unquoted.heredoc.crystal",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_crystal"
						},
						{
							"include": "source.crystal"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?>=\\s*<<(\\w+))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"end": "^\\1$",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.unquoted.heredoc.crystal",
			"patterns": [
				{
					"include": "#heredoc"
				},
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "(?>((<<[-~](\\w+),\\s?)*<<[-~](\\w+)))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.crystal"
				}
			},
			"comment": "heredoc with multiple inputs and indented terminator",
			"end": "^\\s*\\4$",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.crystal"
				}
			},
			"name": "string.unquoted.heredoc.crystal",
			"patterns": [
				{
					"include": "#heredoc"
				},
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "(?<={|{\\s|[^A-Za-z0-9_]do|^do|[^A-Za-z0-9_]do\\s|^do\\s)(\\|)",
			"captures": {
				"1": {
					"name": "punctuation.separator.variable.crystal"
				}
			},
			"end": "(?<!\\|)(\\|)(?!\\|)",
			"patterns": [
				{
					"include": "source.crystal"
				},
				{
					"match": "[_a-zA-Z][_a-zA-Z0-9]*",
					"name": "variable.other.block.crystal"
				},
				{
					"match": ",",
					"name": "punctuation.separator.variable.crystal"
				}
			]
		},
		{
			"match": "=>",
			"name": "punctuation.separator.key-value"
		},
		{
			"match": "->",
			"name": "support.function.kernel.crystal"
		},
		{
			"match": "<<=|%=|&{1,2}=|\\*=|\\*\\*=|\\+=|-=|\\^=|\\|{1,2}=|<<",
			"name": "keyword.operator.assignment.augmented.crystal"
		},
		{
			"match": "<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \\t])\\?",
			"name": "keyword.operator.comparison.crystal"
		},
		{
			"match": "(?<!\\.)\\b(and|not|or)\\b(?![?!])",
			"name": "keyword.operator.logical.crystal"
		},
		{
			"match": "(?<=^|[ \\t])!|&&|\\|\\||\\^",
			"name": "keyword.operator.logical.crystal"
		},
		{
			"comment": "Safe navigation operator",
			"match": "(&\\.)\\s*(?![A-Z])",
			"captures": {
				"1": {
					"name": "punctuation.separator.method.crystal"
				}
			}
		},
		{
			"match": "(%|&|\\*\\*|\\*|\\+|-|/)",
			"name": "keyword.operator.arithmetic.crystal"
		},
		{
			"match": "=",
			"name": "keyword.operator.assignment.crystal"
		},
		{
			"match": "\\||~|>>",
			"name": "keyword.operator.other.crystal"
		},
		{
			"match": ";",
			"name": "punctuation.separator.statement.crystal"
		},
		{
			"match": ",",
			"name": "punctuation.separator.object.crystal"
		},
		{
			"comment": "Mark as namespace separator if double colons followed by capital letter",
			"match": "(::)\\s*(?=[A-Z])",
			"captures": {
				"1": {
					"name": "punctuation.separator.namespace.crystal"
				}
			}
		},
		{
			"comment": "Mark as method separator if double colons not followed by capital letter",
			"match": "(\\.|::)\\s*(?![A-Z])",
			"captures": {
				"1": {
					"name": "punctuation.separator.method.crystal"
				}
			}
		},
		{
			"comment": "Must come after method and constant separators to prefer double colons",
			"match": ":",
			"name": "punctuation.separator.other.crystal"
		},
		{
			"match": "{",
			"name": "punctuation.section.scope.begin.crystal"
		},
		{
			"match": "}",
			"name": "punctuation.section.scope.end.crystal"
		},
		{
			"match": "\\[",
			"name": "punctuation.section.array.begin.crystal"
		},
		{
			"match": "]",
			"name": "punctuation.section.array.end.crystal"
		},
		{
			"match": "\\(|\\)",
			"name": "punctuation.section.function.crystal"
		},
		{
			"begin": "(?=[a-zA-Z0-9_!?]+\\()",
			"end": "(?<=\\))",
			"name": "meta.function-call.crystal",
			"patterns": [
				{
					"include": "#nest_function_parens"
				},
				{
					"include": "#known_function_names"
				},
				{
					"match": "([a-zA-Z0-9_!?]+)(?=\\()",
					"name": "entity.name.function.crystal"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"comment": "This is kindof experimental. There really is no way to perfectly match all regular variables, but you can pretty well assume that any normal word in certain curcumstances that havnt already been scoped as something else are probably variables, and the advantages beat the potential errors",
			"match": "((?<=\\W)\\b|^)\\w+\\b(?=\\s*([\\]\\)\\}\\=\\+\\-\\*\\/\\^\\$\\,\\.]|<\\s|<<[\\s|\\.]))",
			"name": "variable.other.crystal"
		}
	],
	"repository": {
		"escaped_char": {
			"match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
			"name": "constant.character.escape.crystal"
		},
		"heredoc": {
			"begin": "^<<[-~]?\\w+",
			"end": "$",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"interpolated_crystal": {
			"patterns": [
				{
					"begin": "#{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.crystal"
						}
					},
					"contentName": "source.crystal",
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.crystal"
						}
					},
					"name": "meta.embedded.line.crystal",
					"patterns": [
						{
							"include": "#nest_curly_and_self"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.crystal"
						}
					},
					"match": "(#@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.instance.crystal"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.crystal"
						}
					},
					"match": "(#@@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.class.crystal"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.crystal"
						}
					},
					"match": "(#\\$)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.global.crystal"
				}
			]
		},
		"nest_brackets": {
			"begin": "\\[",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "]",
			"patterns": [
				{
					"include": "#nest_brackets"
				}
			]
		},
		"nest_brackets_i": {
			"begin": "\\[",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "]",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_brackets_i"
				}
			]
		},
		"nest_brackets_r": {
			"begin": "\\[",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "]",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_brackets_r"
				}
			]
		},
		"nest_curly": {
			"begin": "{",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#nest_curly"
				}
			]
		},
		"nest_curly_and_self": {
			"patterns": [
				{
					"begin": "{",
					"captures": {
						"0": {
							"name": "punctuation.section.scope.crystal"
						}
					},
					"end": "}",
					"patterns": [
						{
							"include": "#nest_curly_and_self"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"nest_curly_i": {
			"begin": "{",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_curly_i"
				}
			]
		},
		"nest_curly_r": {
			"begin": "{",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_curly_r"
				}
			]
		},
		"nest_ltgt": {
			"begin": "<",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": ">",
			"patterns": [
				{
					"include": "#nest_ltgt"
				}
			]
		},
		"nest_ltgt_i": {
			"begin": "<",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": ">",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_ltgt_i"
				}
			]
		},
		"nest_ltgt_r": {
			"begin": "<",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": ">",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_ltgt_r"
				}
			]
		},
		"nest_parens": {
			"begin": "\\(",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "#nest_parens"
				}
			]
		},
		"nest_parens_i": {
			"begin": "\\(",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_parens_i"
				}
			]
		},
		"nest_parens_r": {
			"begin": "\\(",
			"captures": {
				"0": {
					"name": "punctuation.section.scope.crystal"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_parens_r"
				}
			]
		},
		"regex_sub": {
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.arbitrary-repetition.crystal"
						},
						"3": {
							"name": "punctuation.definition.arbitrary-repetition.crystal"
						}
					},
					"match": "({)\\d+(,\\d+)?(})",
					"name": "string.regexp.arbitrary-repetition.crystal"
				},
				{
					"begin": "\\[(?:\\^?])?",
					"captures": {
						"0": {
							"name": "punctuation.definition.character-class.crystal"
						}
					},
					"end": "]",
					"name": "string.regexp.character-class.crystal",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "\\(\\?#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.crystal"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.crystal"
						}
					},
					"name": "comment.line.number-sign.crystal",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "\\(",
					"captures": {
						"0": {
							"name": "punctuation.definition.group.crystal"
						}
					},
					"end": "\\)",
					"name": "string.regexp.group.crystal",
					"patterns": [
						{
							"include": "#regex_sub"
						}
					]
				},
				{
					"begin": "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.crystal"
						}
					},
					"comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.",
					"end": "$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.crystal"
						}
					},
					"name": "comment.line.number-sign.crystal"
				}
			]
		}
	}
}
