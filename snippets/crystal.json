{
	"HTTP simple server": {
		"prefix": "http server",
		"body": [
			"server = HTTP::Server.new do |context|",
			"  context.response.content_type = \"text/plain\"",
			"  context.response.print \"Hello world!\"",
			"end",
			"\nserver.bind_tcp ${1:\"0.0.0.0\"}, ${2:8080}",
			"server.listen"
		],
		"description": "HTTP Server example."
	},
	"HTTP server with handlers": {
		"prefix": "http server with handlers",
		"body": [
			"server = HTTP::Server.new([",
			"  HTTP::ErrorHandler.new,",
			"  HTTP::LogHandler.new,",
			"  HTTP::StaticFileHandler.new(\".\"),",
			"])",
			"\nserver.bind_tcp ${1:\"0.0.0.0\"}, ${2:8080}",
			"server.listen"
		],
		"description": "HTTP Server example with error, logs and static handler."
	},
	"HTTP handler": {
		"prefix": "http handler",
		"body": [
			"class ${1:HTTPHandler}",
			"  include HTTP::Handler",
			"",
			"  def call(context)",
			"    $0",
			"  end",
			"end"
		],
		"description": "HTTP Handler example."
	},
	"Exception block": {
		"prefix": "begin",
		"body": [
			"begin",
			"  $1",
			"rescue exception",
			"  ",
			"end"
		],
		"description": "Rescue any exception and access the rescued exception using exception variable in the rescue clause."
	},
	"Exception block with ensure": {
		"prefix": "beginen",
		"body": [
			"begin",
			"  $1",
			"rescue exception",
			"  ",
			"ensure",
			"  ",
			"end"
		],
		"description": "Rescue with ensure clause executed at the end, expression regardless of whether an exception was raised or not."
	},
	"Exception block with else": {
		"prefix": "beginel",
		"body": [
			"begin",
			"  $1",
			"rescue exception",
			"  ",
			"else",
			"  ",
			"end"
		],
		"description": "An else clause is executed only if no exceptions were rescued."
	},
	"Exception block with else and ensure": {
		"prefix": "beginelen",
		"body": [
			"begin",
			"  $1",
			"rescue exception",
			"  ",
			"else",
			"  ",
			"ensure",
			"  ",
			"end"
		],
		"description": "Exception block with ensure and else."
	},
	"Module definition": {
		"prefix": "module",
		"body": [
			"module ${1:ModuleName}",
			"  $0",
			"end"
		],
		"description": "Module as namespaces for defining other types, methods and constants or as partial types that can be mixed in other types."
	},
	"Class definition": {
		"prefix": "class",
		"body": [
			"class ${1:ClassName}",
			"  $0",
			"end"
		],
		"description": "A class is a blueprint from which individual objects are created. Class names, and indeed all type names, begin with a capital letter in Crystal."
	},
	"Class definition with initialize": {
		"prefix": "classi",
		"body": [
			"class ${1:ClassName}",
			"  def initialize",
			"    $0",
			"  end",
			"end"
		],
		"description": "Use initialize method as constructor for a class instance."
	},
	"constructor": {
		"prefix": "init",
		"body": [
			"def initialize",
			"  $0",
			"end"
		],
		"description": "Constructor method for an Object."
	},
	"protected def": {
		"prefix": "pro",
		"body": [
			"protected def ${1:method_name}",
			"  $0",
			"end"
		],
		"description": "Protected method for an Object, can only be referenced inside the namespace where they are defined."
	},
	"private def": {
		"prefix": "pri",
		"body": [
			"private def ${1:method_name}",
			"  $0",
			"end"
		],
		"description": "Private method for an Object, can only be invoked without a receiver."
	},
	"method definition": {
		"prefix": "def",
		"body": [
			"def ${1:method_name}",
			"  $0",
			"end"
		],
		"description": "Method names begin with a lowercase letter and, as a convention, only use lowercase letters, underscores and numbers."
	},
	"previous definition invocation": {
		"prefix": "pre",
		"body": [
			"previous_def"
		],
		"description": "Invokes the previously redefined method. Without arguments it receives the same arguments as the method's arguments."
	},
	"delegate": {
		"prefix": "del",
		"body": [
			"delegate ${1:method}, to: ${2:@variable}"
		],
		"description": "Delegate methods to to. This is only useful when no captured blocks are involved"
	},
	"declaring uninitialized variable": {
		"prefix": "uni",
		"body": [
			"${1:variable} = uninitialized ${2:Int32}"
		],
		"description": "Allows declaring uninitialized variables with some random value, garbage, unreliable used in low-level code."
	},
	"Struct definition": {
		"prefix": "struct",
		"body": [
			"struct ${1:StructName}",
			"  $0",
			"end"
		],
		"description": "Struct allocates it on the stack instead of the heap and  is passed by value."
	},
	"Union definition": {
		"prefix": "union",
		"body": [
			"union ${1:UnionName}",
			"  $0",
			"end"
		],
		"description": "Allocates the union on the stack."
	},
	"Enum definition": {
		"prefix": "enum",
		"body": [
			"enum ${1:EnumName}",
			"  $0",
			"end"
		],
		"description": "An enum is a set of integer values, where each value has an associated name."
	},
	"Lib definition": {
		"prefix": "lib",
		"body": [
			"lib ${1:LibName}",
			"  $0",
			"end"
		],
		"description": "A lib declaration groups C functions and types that belong to a library."
	},
	"fun definition": {
		"prefix": "fun",
		"body": [
			"fun ${1:fun_name}",
			"  $0",
			"end"
		],
		"description": "A fun declaration is a primitive function that support primitive types only and inside a lib binds to a C function."
	},
	"macro definition": {
		"prefix": "macro",
		"body": [
			"macro ${1:macro_name}",
			"  $0",
			"end"
		],
		"description": "Macros are methods that receive AST nodes at compile-time and produce code that is pasted into a program."
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1:foo}",
			"  $0",
			"end"
		],
		"description": "An if evaluates the given branch if its condition is truthy."
	},
	"if else": {
		"prefix": "ife",
		"body": [
			"if ${1:foo}",
			"  $0",
			"else",
			"  ",
			"end"
		],
		"description": "It evaluates if when condition is true and the else branch when condition is false."
	},
	"if elsif": {
		"prefix": "ifei",
		"body": [
			"if ${1:foo}",
			"  $0",
			"elsif ",
			"  ",
			"end"
		],
		"description": "To write a chain of if-else-if you use elsif."
	},
	"if elsif else": {
		"prefix": "ifeie",
		"body": [
			"if ${1:foo}",
			"  $0",
			"elsif ",
			"  ",
			"else",
			"  ",
			"end"
		],
		"description": "Add elif and else to conditional structure."
	},
	"unless": {
		"prefix": "unless",
		"body": [
			"unless ${1:foo}",
			"  $0",
			"end"
		],
		"description": " That is, it behaves in the opposite way of an if."
	},
	"until loop": {
		"prefix": "until",
		"body": [
			"until ${1:foo}",
			"  $0",
			"end"
		],
		"description": "An until is just syntax sugar for a while with the condition negate."
	},
	"while loop": {
		"prefix": "while",
		"body": [
			"while ${1:foo}",
			"  $0",
			"end"
		],
		"description": "A while executes its body as long as its condition is truthy."
	},
	"loop": {
		"prefix": "loop",
		"body": [
			"loop do",
			"  $0",
			"end"
		],
		"description": "A loop executes its body forever until a break."
	},
	"spawn": {
		"prefix": "spawn",
		"body": [
			"spawn do",
			"  $0",
			"end"
		],
		"description": "Spawns a fiber."
	},
	"inline block": {
		"prefix": "{",
		"body": [
			"{ ${1:|${2:variable}| $0 }"
		],
		"description": "Create an inline block"
	},
	"block do": {
		"prefix": "do",
		"body": [
			"do",
			"  $0",
			"end"
		],
		"description": "Create a block without arguments"
	},
	"block do with args": {
		"prefix": "dop",
		"body": [
			"do |$1|",
			"  $0",
			"end"
		],
		"description": "Create a block with arguments"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case ${1:exp}",
			"when ${2:value}",
			"  $0",
			"else",
			"  ",
			"end"
		],
		"description": "A case is a control expression which functions a bit like pattern matching."
	},
	"select": {
		"prefix": "select",
		"body": [
			"select",
			"when ${1:ch.receive}",
			"  $0",
			"end"
		],
		"description": "Wait for channels messages using a case statement."
	},
	"Spec description": {
		"prefix": "describe",
		"body": [
			"describe $1 do",
			"  $0",
			"end"
		],
		"description": "Creates a test group block"
	},
	"Spec context": {
		"prefix": "context",
		"body": [
			"context \"${1:when }\" do",
			"  $0",
			"end"
		],
		"description": "Creates a test context block"
	},
	"Spec concrete test case": {
		"prefix": "it",
		"body": [
			"it $1 do",
			"  $0",
			"end"
		],
		"description": "Creates a concrete test case block"
	}
}
