// Data for completion taken from crystal source
// Extracted by @faustinoaq using VSCode
// ------------------------------------------
// TODO: Include all the Standard Library ;-)
// ------------------------------------------

export const REFLECTION_METHODS = [
	["is_a?", "is_a?", "The pseudo-method is_a? determines whether an expression's runtime type inherits or includes another type."],
	["nil?", "nil?", "The pseudo-method nil? determines whether an expression's runtime is Nil."],
	["responds_to?", "responds_to?", "The pseudo-method responds_to? determines whether a type has a method with the given name."],
	["as", "as", "The as pseudo-method restricts the types of an expression."],
	["as?", "as?", "The as? pseudo-method is similar to as, except that it returns nil instead of raising an exception when the type doesn't match. It also can't be used to cast between pointer types and other types.", 5]
]
export const NIL_METHODS = [
	["clone", "clone", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["==", "==(other : Nil)", "Returns true: Nil has only one singleton value: nil."],
	["hash", "hash", "Returns 0."],
	["inspect", "inspect(io)", "Writes nil to the given IO."],
	["inspect", "inspect", "Returns nil."],
	["not_nil!", "not_nil!", "Raises an exception."],
	["object_id", "object_id", "Returns 0_u64."],
	["same?", "same?(other : Nil)", "Returns true: Nil has only one singleton value: nil."],
	["same?", "same?(other : Reference)", "Returns false."],
	["to_s", "to_s(io : IO)", "Doesn't write anything to the given IO."],
	["to_s", "to_s", "Returns an empty string."],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", ""],
	["try", "try(&block)", "Doesn't yields to the block.", 5]
]
export const BOOL_METHODS = [
	["!=", "!=(other : Bool) : Bool", "Returns true if self is not equal to other."],
	["&", "&(other : Bool)", "Bitwise AND."],
	["==", "==(other : Bool) : Bool", "Returns true if self is equal to other."],
	["^", "^(other : Bool)", "Exclusive OR."],
	["hash", "hash", "Returns a hash value for this boolean: 0 for false, 1 for true."],
	["to_s", "to_s(io)", "Appends true for true and false for false to the given IO."],
	["|", "|(other : Bool)", "Bitwise OR."],
	["to_s", "to_s", "Returns true for true and false for false."],
	["clone", "clone", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", "", 5]
]
export const INT_METHODS = [
	["%", "%(other : Int)", "Returns self modulo other."],
	["**", "**(exponent : Float) : Float64", "Returns the value of raising self to the power of exponent."],
	["**", "**(exponent : Int) : self", "Returns the value of raising self to the power of exponent."],
	["/", "/(other : Int)", "Divides self by other using floored division."],
	["<<", "<<(count : Int)", "Returns the result of shifting this number's bits count positions to the left."],
	[">>", ">>(count : Int)", "Returns the result of shifting this number's bits count positions to the right."],
	["bit", "bit(bit)", "Returns this number's bitth bit, starting with the least-significant."],
	["chr", "chr", "Returns a Char that has the unicode codepoint of self."],
	["popcount", "popcount", "Counts 1-bits in the binary representation of this integer."],
	["remainder", "remainder(other : Int)", "Returns self remainder other."],
	["tdiv", "tdiv(other : Int)", "Divides self by other using truncated division."],
	["to_big_i", "to_big_i : BigInt", "Returns a BigInt representing this integer."],
	["to_big_r", "to_big_r", "Returns a BigRational representing this integer."],
	["to_io", "to_io(io : IO, format : IO::ByteFormat)", "Writes this integer to the given io in the given format."],
	["%", "%(other : BigInt) : BigInt", ""],
	["*", "*(other : BigRational)", ""],
	["*", "*(other : BigInt) : BigInt", ""],
	["+", "+(other : BigRational)", ""],
	["+", "+(other : BigInt) : BigInt", ""],
	["-", "-(other : BigRational)", ""],
	["-", "-(other : BigInt) : BigInt", ""],
	["/", "/(other : BigRational)", ""],
	["/", "/(other : BigInt) : BigInt", ""],
	["<=>", "<=>(other : BigInt)", ""],
	["<=>", "<=>(other : BigRational)", ""],
	["===", "===(char : Char)", ""],
	["abs", "abs", "Return absolute value of a number."],
	["ceil", "ceil", ""],
	["day", "day", ""],
	["days", "days", ""],
	["divisible_by?", "divisible_by?(num)", ""],
	["downto", "downto(to)", ""],
	["downto", "downto(to, &block : self -> ) : Nil", ""],
	["even?", "even?", ""],
	["fdiv", "fdiv(other)", ""],
	["floor", "floor", ""],
	["gcd", "gcd(other : Int)", ""],
	["gcm", "gcm(other : BigInt) : Int", ""],
	["hash", "hash", ""],
	["hour", "hour", ""],
	["hours", "hours", ""],
	["lcm", "lcm(other : Int)", ""],
	["lcm", "lcm(other : BigInt) : BigInt", ""],
	["millisecond", "millisecond", ""],
	["milliseconds", "milliseconds", ""],
	["minute", "minute", ""],
	["minutes", "minutes", ""],
	["modulo", "modulo(other)", ""],
	["month", "month", ""],
	["months", "months", ""],
	["odd?", "odd?", ""],
	["pred", "pred", ""],
	["round", "round", ""],
	["second", "second", ""],
	["seconds", "seconds", ""],
	["succ", "succ", ""],
	["times", "times(&block : self -> ) : Nil", ""],
	["times", "times", ""],
	["to", "to(to)", ""],
	["to", "to(to, &block : self -> ) : Nil", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_s", "to_s(base : Int, upcase ':' Bool = false)", ""],
	["to_s", "to_s(io : IO)", ""],
	["to_s", "to_s(base : Int, io : IO, upcase : Bool = false)", ""],
	["to_s", "to_s", ""],
	["trunc", "trunc", ""],
	["upto", "upto(to)", ""],
	["upto", "upto(to, &block : self -> ) : Nil", ""],
	["week", "week", ""],
	["weeks", "weeks", ""],
	["year", "year", ""],
	["years", "years", ""],
	["~", "~", ""],
	["popcount", "popcount", ""],
	["clone", "clone", ""],
	["!=", "!=(other : Int16) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : Int8) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : Int32) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : Float64) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : Float32) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : UInt64) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : UInt32) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : UInt16) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : UInt8) : Bool", "Returns true if self is not equal to other."],
	["!=", "!=(other : Int64) : Bool", "Returns true if self is not equal to other."],
	["&", "&(other : Int8) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : Int16) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : Int32) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : Int64) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : UInt8) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : UInt16) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : UInt32) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["&", "&(other : UInt64) : self", "Returns the result of performing a bitwise AND of self's and other's bits."],
	["*", "*(other : Int8) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : Int16) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : Int32) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : Int64) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : UInt16) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : UInt32) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : UInt64) : self", "Returns the result of multiplying self and other."],
	["*", "*(other : Float32) : Float32", "Returns the result of multiplying self and other."],
	["*", "*(other : Float64) : Float64", "Returns the result of multiplying self and other."],
	["*", "*(other : UInt8) : self", "Returns the result of multiplying self and other."],
	["+", "+(other : Int16) : self", "Returns the result of adding self and other."],
	["+", "+(other : Int32) : self", "Returns the result of adding self and other."],
	["+", "+(other : Int64) : self", "Returns the result of adding self and other."],
	["+", "+(other : Float64) : Float64", "Returns the result of adding self and other."],
	["+", "+(other : Float32) : Float32", "Returns the result of adding self and other."],
	["+", "+(other : UInt64) : self", "Returns the result of adding self and other."],
	["+", "+(other : UInt32) : self", "Returns the result of adding self and other."],
	["+", "+(other : UInt16) : self", "Returns the result of adding self and other."],
	["+", "+(other : UInt8) : self", "Returns the result of adding self and other."],
	["+", "+(other : Int8) : self", "Returns the result of adding self and other."],
	["-", "-(other : Int8) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : Float64) : Float64", "Returns the result of subtracting self and other."],
	["-", "-(other : Float32) : Float32", "Returns the result of subtracting self and other."],
	["-", "-(other : UInt64) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : UInt32) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : UInt16) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : UInt8) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : Int64) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : Int32) : self", "Returns the result of subtracting self and other."],
	["-", "-(other : Int16) : self", "Returns the result of subtracting self and other."],
	["/", "/(other : Float32) : Float32", "Returns the result of dividing self and other."],
	["/", "/(other : Float64) : Float64", "Returns the result of dividing self and other."],
	["<", "<(other : UInt16) : Bool", "Returns true if self is less than other."],
	["<", "<(other : Int32) : Bool", "Returns true if self is less than other."],
	["<", "<(other : Int16) : Bool", "Returns true if self is less than other."],
	["<", "<(other : Int8) : Bool", "Returns true if self is less than other."],
	["<", "<(other : UInt8) : Bool", "Returns true if self is less than other."],
	["<", "<(other : Int64) : Bool", "Returns true if self is less than other."],
	["<", "<(other : UInt32) : Bool", "Returns true if self is less than other."],
	["<", "<(other : UInt64) : Bool", "Returns true if self is less than other."],
	["<", "<(other : Float32) : Bool", "Returns true if self is less than other."],
	["<", "<(other : Float64) : Bool", "Returns true if self is less than other."],
	["<=", "<=(other : Int8) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : Float64) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : Float32) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : UInt64) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : UInt32) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : UInt16) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : Int16) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : UInt8) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : Int32) : Bool", "Returns true if self is less than or equal to other."],
	["<=", "<=(other : Int64) : Bool", "Returns true if self is less than or equal to other."],
	["==", "==(other : Float64) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : Float32) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : UInt64) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : UInt32) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : UInt16) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : UInt8) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : Int64) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : Int32) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : Int8) : Bool", "Returns true if self is equal to other."],
	["==", "==(other : Int16) : Bool", "Returns true if self is equal to other."],
	[">", ">(other : Int8) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : Int16) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : Int32) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : Int64) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : UInt8) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : UInt16) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : UInt32) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : UInt64) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : Float32) : Bool", "Returns true if self is greater than other."],
	[">", ">(other : Float64) : Bool", "Returns true if self is greater than other."],
	[">=", ">=(other : UInt16) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : Int8) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : Int16) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : Int32) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : Int64) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : UInt8) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : Float64) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : Float32) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : UInt64) : Bool", "Returns true if self is greater than or equal to other."],
	[">=", ">=(other : UInt32) : Bool", "Returns true if self is greater than or equal to other."],
	["^", "^(other : Int8) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : Int32) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : Int64) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : UInt8) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : UInt16) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : UInt32) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : UInt64) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["^", "^(other : Int16) : self", "Returns the result of performing a bitwise XOR of self's and other's bits."],
	["to_f", "to_f : Float64", "Returns self converted to Float64."],
	["to_f32", "to_f32 : Float32", "Returns self converted to Float32."],
	["to_f64", "to_f64 : Float64", "Returns self converted to Float64."],
	["to_i", "to_i : Int32", "Returns self converted to Int32."],
	["to_i16", "to_i16 : Int16", "Returns self converted to Int16."],
	["to_i32", "to_i32 : Int32", "Returns self converted to Int32."],
	["to_i64", "to_i64 : Int64", "Returns self converted to Int64."],
	["to_i8", "to_i8 : Int8", "Returns self converted to Int8."],
	["to_u", "to_u : UInt32", "Returns self converted to UInt32."],
	["to_u16", "to_u16 : UInt16", "Returns self converted to UInt16."],
	["to_u32", "to_u32 : UInt32", "Returns self converted to UInt32."],
	["to_u64", "to_u64 : UInt64", "Returns self converted to UInt64."],
	["to_u8", "to_u8 : UInt8", "Returns self converted to UInt8."],
	["unsafe_chr", "unsafe_chr : Char", "Returns a Char that has the unicode codepoint of self, without checking if this integer is in the range valid for chars (0..0x10ffff)."],
	["|", "|(other : UInt64) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : UInt32) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : UInt16) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : UInt8) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : Int64) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : Int32) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : Int16) : self", "Returns the result of performing a bitwise OR of self's and other's bits."],
	["|", "|(other : Int8) : self", "Returns the result of performing a bitwise OR of self's and other's bits.", 5]
]
export const FLOAT_METHODS = [
	["%", "%(other)", ""],
	["-", "-", ""],
	["<=>", "<=>(other : BigRational)", ""],
	["<=>", "<=>(other : BigInt)", ""],
	["days", "days", ""],
	["fdiv", "fdiv(other)", ""],
	["finite?", "finite?", ""],
	["hours", "hours", ""],
	["infinite?", "infinite?", ""],
	["milliseconds", "milliseconds", ""],
	["minutes", "minutes", ""],
	["modulo", "modulo(other)", ""],
	["nan?", "nan?", ""],
	["remainder", "remainder(other)", ""],
	["seconds", "seconds", ""],
	["to_json", "to_json(json : JSON::Builder)", ""]
]
export const CHAR_METHODS = [
	["%", "%(other)", ""],
	["-", "-", ""],
	["<=>", "<=>(other : BigRational)", ""],
	["<=>", "<=>(other : BigInt)", ""],
	["days", "days", ""],
	["fdiv", "fdiv(other)", ""],
	["finite?", "finite?", ""],
	["hours", "hours", ""],
	["infinite?", "infinite?", ""],
	["milliseconds", "milliseconds", ""],
	["minutes", "minutes", ""],
	["modulo", "modulo(other)", ""],
	["nan?", "nan?", ""],
	["remainder", "remainder(other)", ""],
	["seconds", "seconds", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_big_i", "to_big_i : BigInt", "Returns a BigInt representing this float (rounded using floor)."],
	["to_io", "to_io(io : IO, format : IO::ByteFormat)", "Writes this float to the given io in the given format."]
]
export const STRING_METHODS = [
	["build", "build(capacity = 64, &block) : self", "Builds a String by creating a String::Builder with the given initial capacity, yielding it to the block and finally getting a String out of it."],
	["%", "%(other)", "Interpolates other into the string using Kernel#sprintf."],
	["*", "*(times : Int)", "Makes a new String by adding str to itself times times."],
	["+", "+(other : self)", "Concatenates str and other."],
	["+", "+(char : Char)", "Concatenates str and other."],
	["<=>", "<=>(other : self)", "1, 0 or +1 depending on whether this string is less, equal or greater than other."],
	["=~", "=~(other)", "Tests whether str matches regex."],
	["=~", "=~(regex : Regex)", "Tests whether str matches regex."],
	["[]", "[](start : Int, count : Int)", "Returns a substring starting from the start character of size count."],
	["[]", "[](index : Int)", "Returns the Char at the given index, or raises IndexError if out of bounds."],
	["[]", "[](range : Range(Int, Int))", "Returns a substring by using a Range's begin and end as character indices."],
	["ascii_only?", "ascii_only?", "Returns true if this String is comprised in its entirety by ASCII characters."],
	["blank?", "blank?", "Returns true if this string consists exclusively of unicode whitespace."],
	["byte_index_to_char_index", "byte_index_to_char_index(index)", "Returns the char index of a byte index, or nil if out of bounds."],
	["bytes", "bytes", "Returns this string's bytes as an Array(UInt8)."],
	["bytesize", "bytesize : Int32", "Returns the number of bytes in this string."],
	["camelcase", "camelcase", "Converts underscores to camelcase boundaries."],
	["capitalize", "capitalize(options = Unicode::CaseOptions::None)", "Returns a new String with the first letter converted to uppercase and every subsequent letter converted to lowercase."],
	["char_index_to_byte_index", "char_index_to_byte_index(index)", "Returns the byte index of a char index, or nil if out of bounds."],
	["chars", "chars", "Returns an Array of all characters in the string."],
	["check_no_null_byte", "check_no_null_byte", "Raises an ArgumentError if self has null bytes."],
	["chomp", "chomp", "Returns a new String with the last carriage return removed (that is, it will remove \n, \r, and \r\n)."],
	["chomp", "chomp(suffix : String)", "Returns a new String with suffix removed from the end of the string."],
	["chomp", "chomp(suffix : Char)", "Returns a new String with suffix removed from the end of the string."],
	["codepoints", "codepoints", "Returns an Array of the codepoints that make the string."],
	["compare", "compare(other : String, case_insensitive = false)", "1, 0 or +1 depending on whether this string is less, equal or greater than other, optionally in a case_insensitive manner."],
	["count", "count(&block)", "Yields each char in this string to the block, returns the number of times the block returned a truthy value."],
	["count", "count(other : Char)", "Counts the occurrences of other char in this string."],
	["count", "count(*sets)", "Sets should be a list of strings following the rules described at Char#in_set?."],
	["delete", "delete(&block)", "Yields each char in this string to the block."],
	["delete", "delete(char : Char)", "Returns a new String with all occurrences of char removed."],
	["delete", "delete(*sets)", "Sets should be a list of strings following the rules described at Char#in_set?."],
	["downcase", "downcase(options = Unicode::CaseOptions::None)", "Returns a new String with each uppercase letter replaced with its lowercase counterpart."],
	["each_byte", "each_byte", "Returns an Iterator over each byte in the string."],
	["each_byte", "each_byte(&block)", "Yields each byte in the string to the block."],
	["each_char", "each_char", "Returns an Iterator over each character in the string."],
	["each_char", "each_char(&block) : Nil", "Yields each character in the string to the block."],
	["each_char_with_index", "each_char_with_index(&block)", "Yields each character and its index in the string to the block."],
	["each_codepoint", "each_codepoint(&block)", "Yields each codepoint to the block."],
	["each_codepoint", "each_codepoint", "Returns an Iterator for each codepoint."],
	["each_line", "each_line(chomp = true)", "Returns an Iterator which yields each line of this string (see String#each_line)."],
	["each_line", "each_line(chomp = true, &block) : Nil", "Splits the string after each newline and yields each line to a block."],
	["empty?", "empty?", "Returns true if this is the empty string, \"\"."],
	["encode", "encode(encoding : String, invalid : Symbol? = nil) : Bytes", "Returns a slice of bytes containing this string encoded in the given encoding."],
	["gsub", "gsub(string : String, &block)", "Returns a String where all occurrences of the given string are replaced with the block's value."],
	["gsub", "gsub(&block : Char -> _)", "Returns a String where each character yielded to the given block is replaced by the block's return value."],
	["gsub", "gsub(char : Char, replacement)", "Returns a String where all occurrences of the given char are replaced with the given replacement."],
	["gsub", "gsub(pattern : Regex, hash : Hash(String, _) | NamedTuple)", "Returns a String where all occurrences of the given pattern are replaced with a hash of replacements."],
	["gsub", "gsub(pattern : Regex, replacement, backreferences = true)", "Returns a String where all occurrences of the given pattern are replaced with the given replacement."],
	["gsub", "gsub(string : String, replacement)", "Returns a String where all occurrences of the given string are replaced with the given replacement."],
	["gsub", "gsub(hash : Hash(Char, _))", "Returns a String where all chars in the given hash are replaced by the corresponding hash values."],
	["gsub", "gsub(tuple : NamedTuple)", "Returns a String where all chars in the given named tuple are replaced by the corresponding tuple values."],
	["gsub", "gsub(pattern : Regex, &block)", "Returns a String where all occurrences of the given pattern are replaced by the block value's value."],
	["has_back_references?", "has_back_references?", "This returns true if this string has '\\' in it."],
	["hash", "hash", "Returns a hash based on this string’s size and content."],
	["hexbytes", "hexbytes : Bytes", "Interprets this string as containing a sequence of hexadecimal values and decodes it as a slice of bytes."],
	["hexbytes??", "hexbytes? : Bytes?", "Interprets this string as containing a sequence of hexadecimal values and decodes it as a slice of bytes."],
	["includes?", "includes?(search : Char | String)", "Returns true if the string contains search."],
	["index", "index(search : Regex, offset = 0)", "Returns the index of search in the string, or nil if the string is not present."],
	["index", "index(search : String, offset = 0)", "Returns the index of search in the string, or nil if the string is not present."],
	["index", "index(search : Char, offset = 0)", "Returns the index of search in the string, or nil if the string is not present."],
	["insert", "insert(index : Int, other : Char)", "Returns a new String that results of inserting other in self at index."],
	["insert", "insert(index : Int, other : String)", "Returns a new String that results of inserting other in self at index."],
	["lchop", "lchop", "Returns a new String with the first char removed from it."],
	["lchop", "lchop(prefix : String)", "Returns a new String with prefix removed from the beginning of the string."],
	["lchop", "lchop(prefix : Char)", "Returns a new String with prefix removed from the beginning of the string."],
	["ljust", "ljust(len, char : Char = ' ')", "Adds instances of char to right of the string until it is at least size of len."],
	["lstrip", "lstrip(char : Char)", "Returns a new string with leading occurrences of char removed."],
	["lstrip", "lstrip", "Returns a new String with leading whitespace removed."],
	["lstrip", "lstrip(&block : Char -> _)", "Returns a new string where leading characters for which the block returns a truthy value are removed."],
	["lstrip", "lstrip(chars : String)", "Returns a new string where leading occurrences of any char in chars are removed."],
	["match", "match(regex : Regex, pos = 0) : Regex::MatchData?", "Finds match of regex, starting at pos."],
	["partition", "partition(search : Regex) : Tuple(String, String, String)", "Searches separator or pattern (Regex) in the string, and returns a Tuple with the part before it, the match, and the part after it."],
	["partition", "partition(search : Char | String) : Tuple(String, String, String)", "Searches separator or pattern (Regex) in the string, and returns a Tuple with the part before it, the match, and the part after it."],
	["rchop", "rchop", "Returns a new String with the last character removed."],
	["rchop", "rchop(suffix : String)", "Returns a new String with suffix removed from the end of the string."],
	["rchop", "rchop(suffix : Char)", "Returns a new String with suffix removed from the end of the string."],
	["reverse", "reverse", "Reverses the order of characters in the string."],
	["rindex", "rindex(search : Char, offset = size - 1)", "Returns the index of the last appearance of search in the string, If offset is present, it defines the position to end the search (characters beyond this point are ignored)."],
	["rindex", "rindex(search : String, offset = size - search.size)", "Returns the index of the last appearance of search in the string, If offset is present, it defines the position to end the search (characters beyond this point are ignored)."],
	["rindex", "rindex(search : Regex, offset = 0)", "Returns the index of the last appearance of search in the string, If offset is present, it defines the position to end the search (characters beyond this point are ignored)."],
	["rjust", "rjust(len, char : Char = ' ')", "Adds instances of char to left of the string until it is at least size of len."],
	["rpartition", "rpartition(search : Char | String) : Tuple(String, String, String)", "Searches separator or pattern (Regex) in the string from the end of the string, and returns a Tuple with the part before it, the match, and the part after it."],
	["rpartition", "rpartition(search : Regex) : Tuple(String, String, String)", "Searches separator or pattern (Regex) in the string from the end of the string, and returns a Tuple with the part before it, the match, and the part after it."],
	["rstrip", "rstrip", "Returns a new String with trailing whitespace removed."],
	["rstrip", "rstrip(chars : String)", "Returns a new string where trailing occurrences of any char in chars are removed."],
	["rstrip", "rstrip(char : Char)", "Returns a new string with trailing occurrences of char removed."],
	["rstrip", "rstrip(&block : Char -> _)", "Returns a new string where trailing characters for which the block returns a truthy value are removed."],
	["scan", "scan(pattern : String)", "Searches the string for instances of pattern, returning an array of the matched string for each match."],
	["scan", "scan(pattern : Regex, &block)", "Searches the string for instances of pattern, yielding a Regex::MatchData for each match."],
	["scan", "scan(pattern : Regex)", "Searches the string for instances of pattern, returning an Array of Regex::MatchData for each match."],
	["scan", "scan(pattern : String, &block)", "Searches the string for instances of pattern, yielding the matched string for each match."],
	["scrub", "scrub(replacement = Char::REPLACEMENT) : String", "8 encoding are replaced with replacement."],
	["size", "size", "Returns the number of unicode codepoints in this string."],
	["split", "split(separator : Regex, limit = nil, &block : String -> _)", "Makes an Array by splitting the string on separator (and removing instances of separator)."],
	["split", "split(separator : Regex, limit = nil)", "Splits the string after each regex separator and yields each part to a block."],
	["split", "split(separator : String, limit = nil, &block : String -> _)", "Splits the string after each string separator and yields each part to a block."],
	["split", "split(limit : Int32? = nil)", "Makes an array by splitting the string on any ASCII whitespace characters (and removing that whitespace)."],
	["split", "split(limit : Int32? = nil, &block : String -> _)", "Splits the string after any ASCII whitespace character and yields each part to a block."],
	["split", "split(separator : Char, limit = nil)", "Makes an Array by splitting the string on the given character separator (and removing that character)."],
	["split", "split(separator : String, limit = nil)", "Makes an Array by splitting the string on separator (and removing instances of separator)."],
	["split", "split(separator : Char, limit = nil, &block : String -> _)", "Splits the string after each character separator and yields each part to a block."],
	["squeeze", "squeeze(&block)", "Yields each char in this string to the block."],
	["squeeze", "squeeze(char : Char)", "Returns a new String, with all runs of char replaced by one instance."],
	["squeeze", "squeeze", "Returns a new String, that has all characters removed, that were the same as the previous one."],
	["squeeze", "squeeze(*sets : String)", "Sets should be a list of strings following the rules described at Char#in_set?."],
	["strip", "strip(&block : Char -> _)", "Returns a new string where leading and trailing characters for which the block returns a truthy value are removed."],
	["strip", "strip", "Returns a new String with leading and trailing whitespace removed."],
	["strip", "strip(chars : String)", "Returns a new string where leading and trailing occurrences of any char in chars are removed."],
	["strip", "strip(char : Char)", "Returns a new string where leading and trailing occurrences of char are removed."],
	["sub", "sub(pattern : Regex, &block)", "Returns a String where the first occurrence of pattern is replaced by the block's return value."],
	["sub", "sub(index : Int, replacement : Char)", "Returns a new String with the character at the given index replaced by replacement."],
	["sub", "sub(index : Int, replacement : String)", "Returns a new String with the character at the given index replaced by replacement."],
	["sub", "sub(range : Range(Int, Int), replacement : Char)", "Returns a new String with characters at the given range replaced by replacement."],
	["sub", "sub(range : Range(Int, Int), replacement : String)", "Returns a new String with characters at the given range replaced by replacement."],
	["sub", "sub(hash : Hash(Char, _))", "Returns a String where the first char in the string matching a key in the given hash is replaced by the corresponding hash value."],
	["sub", "sub(&block : Char -> _)", "Returns a new String where the first character is yielded to the given block and replaced by its return value."],
	["sub", "sub(char : Char, replacement)", "Returns a String where the first occurrence of char is replaced by replacement."],
	["sub", "sub(string : String, &block)", "Returns a String where the first occurrences of the given string is replaced with the block's value."],
	["sub", "sub(pattern : Regex, replacement, backreferences = true)", "Returns a String where the first occurrence of pattern is replaced by replacement"],
	["sub", "sub(pattern : Regex, hash : Hash(String, _) | NamedTuple)", "Returns a String where the first occurrences of the given pattern is replaced with the matching entry from the hash of replacements."],
	["sub", "sub(string : String, replacement)", "Returns a String where the first occurrences of the given string is replaced with the given replacement."],
	["succ", "succ", "Returns the successor of the string."],
	["to_big_i", "to_big_i(base = 10) : BigInt", "Returns a BigInt from this string, in the given base."],
	["to_f", "to_f(whitespace = true, strict = true)", "Returns the result of interpreting characters in this string as a floating point number (Float64)."],
	["to_f32", "to_f32(whitespace = true, strict = true)", "Same as #to_f but returns a Float32."],
	["to_f32?", "to_f32?(whitespace = true, strict = true)", "Same as #to_f? but returns a Float32."],
	["to_f64", "to_f64(whitespace = true, strict = true)", "Same as #to_f."],
	["to_f64?", "to_f64?(whitespace = true, strict = true)", "Same as #to_f?."],
	["to_f?", "to_f?(whitespace = true, strict = true)", "Returns the result of interpreting characters in this string as a floating point number (Float64)."],
	["to_i", "to_i(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i, but returns the block's value if there is not a valid number at the start of this string, or if the resulting integer doesn't fit an Int32."],
	["to_i", "to_i(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true)", "Returns the result of interpreting leading characters in this string as an integer base base (between 2 and 36)."],
	["to_i16", "to_i16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an Int16 or the block's value."],
	["to_i16", "to_i16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int16", "Same as #to_i but returns an Int16."],
	["to_i16?", "to_i16?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int16?", "Same as #to_i but returns an Int16 or nil."],
	["to_i32", "to_i32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int32", "Same as #to_i."],
	["to_i32", "to_i32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i."],
	["to_i32?", "to_i32?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int32?", "Same as #to_i."],
	["to_i64", "to_i64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an Int64 or the block's value."],
	["to_i64", "to_i64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int64", "Same as #to_i but returns an Int64."],
	["to_i64?", "to_i64?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int64?", "Same as #to_i but returns an Int64 or nil."],
	["to_i8", "to_i8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int8", "Same as #to_i but returns an Int8."],
	["to_i8", "to_i8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an Int8 or the block's value."],
	["to_i8?", "to_i8?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int8?", "Same as #to_i but returns an Int8 or nil."],
	["to_i?", "to_i?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true)", "Same as #to_i, but returns nil if there is not a valid number at the start of this string, or if the resulting integer doesn't fit an Int32."],
	["to_slice", "to_slice : Bytes", "Returns the underlying bytes of this String in an unsafe way."],
	["to_u16", "to_u16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt16", "Same as #to_i but returns an UInt16."],
	["to_u16", "to_u16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an UInt16 or the block's value."],
	["to_u16?", "to_u16?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt16?", "Same as #to_i but returns an UInt16 or nil."],
	["to_u32", "to_u32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an UInt32 or the block's value."],
	["to_u32", "to_u32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt32", "Same as #to_i but returns an UInt32."],
	["to_u32?", "to_u32?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt32?", "Same as #to_i but returns an UInt32 or nil."],
	["to_u64", "to_u64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an UInt64 or the block's value."],
	["to_u64", "to_u64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt64", "Same as #to_i but returns an UInt64."],
	["to_u64?", "to_u64?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt64?", "Same as #to_i but returns an UInt64 or nil."],
	["to_u8", "to_u8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt8", "Same as #to_i but returns an UInt8."],
	["to_u8", "to_u8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)", "Same as #to_i but returns an UInt8 or the block's value."],
	["to_u8?", "to_u8?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt8?", "Same as #to_i but returns an UInt8 or nil."],
	["to_unsafe", "to_unsafe : Pointer(UInt8)", "Returns a pointer to the underlying bytes of this String."],
	["tr", "tr(from : String, to : String)", "Returns a new string translating characters using from and to as a map."],
	["underscore", "underscore", "Converts camelcase boundaries to underscores."],
	["upcase", "upcase(options = Unicode::CaseOptions::None)", "Returns a new String with each lowercase letter replaced with its uppercase counterpart."],
	["valid_encoding?", "valid_encoding?", "8 encoding."],
	["==", "==(other : self)", ""],
	["[]", "[](regex : Regex, group)", ""],
	["[]", "[](str : String | Char)", ""],
	["[]", "[](regex : Regex)", ""],
	["[]?", "[]?(regex : Regex)", ""],
	["[]?", "[]?(index : Int)", ""],
	["[]?", "[]?(regex : Regex, group)", ""],
	["[]?", "[]?(str : String | Char)", ""],
	["at", "at(index : Int)", ""],
	["at", "at(index : Int, &block)", ""],
	["byte_at", "byte_at(index, &block)", ""],
	["byte_at", "byte_at(index)", ""],
	["byte_at?", "byte_at?(index)", ""],
	["byte_index", "byte_index(string : String, offset = 0)", ""],
	["byte_index", "byte_index(byte : Int, offset = 0)", ""],
	["byte_slice", "byte_slice(start : Int, count : Int)", ""],
	["byte_slice", "byte_slice(start : Int)", ""],
	["char_at", "char_at(index)", ""],
	["clone", "clone", ""],
	["codepoint_at", "codepoint_at(index)", ""],
	["dump", "dump(io)", ""],
	["dump", "dump", ""],
	["dump_unquoted", "dump_unquoted(io)", ""],
	["dump_unquoted", "dump_unquoted", ""],
	["dup", "dup", ""],
	["ends_with?", "ends_with?(char : Char)", ""],
	["ends_with?", "ends_with?(str : String)", ""],
	["inspect", "inspect(io)", ""],
	["inspect_unquoted", "inspect_unquoted", ""],
	["inspect_unquoted", "inspect_unquoted(io)", ""],
	["lines", "lines(chomp = true)", ""],
	["pretty_print", "pretty_print(pp)", ""],
	["starts_with?", "starts_with?(char : Char)", ""],
	["starts_with?", "starts_with?(str : String)", ""],
	["to_big_f", "to_big_f", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_s", "to_s(io)", ""],
	["to_s", "to_s", ""],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", ""],
	["unsafe_byte_at", "unsafe_byte_at(index)", ""],
	["unsafe_byte_slice", "unsafe_byte_slice(byte_offset, count)", ""],
	["unsafe_byte_slice", "unsafe_byte_slice(byte_offset)", ""]
]
export const SYMBOLS_METHODS = [
	["!=", "!=(other : Symbol) : Bool", "Returns true if self is not equal to other."],
	["<=>", "<=>(other : Symbol)", "Compares symbol with other based on String#<=> method."],
	["==", "==(other : Symbol) : Bool", "Returns true if self is equal to other."],
	["hash", "hash : Int32", "Generates an Int32 hash value for this symbol."],
	["inspect", "inspect(io : IO)", "Returns the symbol literal representation as a string."],
	["to_i", "to_i : Int32", "Returns a unique number for this symbol."],
	["to_s", "to_s(io : IO)", "Appends the symbol's name to the passed IO."],
	["to_s", "to_s : String", "Returns the symbol's name as a String."],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["clone", "clone", ""]
]
export const ARRAY_METHODS = [
	["includes?", "includes?(other : self)", "Returns true if the array contains search."],
	["join", "join(separator, io)", "Prints to io all the elements in the collection, separated by separator.", 5],
	["join", "join(separator = \"\")", "Returns a String created by concatenating the elements in the collection, separated by separator (defaults to none).", 5],
	["join", "join(separator, io, &block)", "Prints to io the concatenation of the elements, with the possibility of controlling how the printing is done via a block.", 5],
	["join", "join(separator = \"\", &block)", "Returns a String created by concatenating the results of passing the elements in the collection to the passed block, separated by separator (defaults to none).", 5],
	["each", "each", "Returns an iterator over the array entries.", 5],
	["each", "each(&block) : Nil", "Calls the given block for each element and passes in the element.", 5],
	["build", "build(capacity : Int, &block)", "Creates a new Array, allocating an internal buffer with the given capacity, and yielding that buffer."],
	["each_product", "each_product(arrays : Array(Array), reuse = false, &block)", ""],
	["each_product", "each_product(*arrays : Array, reuse = false, &block)", ""],
	["from_json", "from_json(string_or_io, &block) : Nil", "Parses a String or IO denoting a JSON array, yielding each of its elements to the given block."],
	["from_yaml", "from_yaml(string_or_io, &block)", ""],
	["product", "product(arrays)", ""],
	["product", "product(*arrays : Array)", ""],
	["&", "&(other : Array(U)) forall U", "Set intersection: returns a new Array containing elements common to self and other, excluding any duplicates."],
	["*", "*(times : Int)", "Repetition: Returns a new Array built by concatenating times copies of self."],
	["+", "+(other : Array(U)) forall U", "Concatenation."],
	["-", "-(other : Array(U)) forall U", "Difference."],
	["<<", "<<(value : T)", "Append."],
	["<=>", "<=>(other : Array)", "Combined comparison operator."],
	["==", "==(other : Array)", "Equality."],
	["[]", "[](range : Range(Int, Int))", "Returns all elements that are within the given range."],
	["[]", "[](start : Int, count : Int)", "Returns count or less (if there aren't enough) elements starting at the given start index."],
	["[]=", "[]=(range : Range(Int, Int), values : Array(T))", "Replaces a subrange with the elements of the given array."],
	["[]=", "[]=(range : Range(Int, Int), value : T)", "Replaces a subrange with a single value."],
	["[]=", "[]=(index : Int, value : T)", "Sets the given value at the given index."],
	["[]=", "[]=(index : Int, count : Int, values : Array(T))", "Replaces a subrange with the elements of the given array."],
	["[]=", "[]=(index : Int, count : Int, value : T)", "Replaces a subrange with a single value."],
	["clear", "clear", "Removes all elements from self."],
	["clone", "clone", "Returns a new Array that has self's elements cloned."],
	["compact", "compact", "Returns a copy of self with all nil elements removed."],
	["compact!", "compact!", "Removes all nil elements from self."],
	["concat", "concat(other : Enumerable)", "Appends the elements of other to self, and returns self."],
	["concat", "concat(other : Array)", "Appends the elements of other to self, and returns self."],
	["delete", "delete(obj)", "Removes all items from self that are equal to obj."],
	["delete_at", "delete_at(index : Int, count : Int)", "Removes count elements from self starting at index."],
	["delete_at", "delete_at(index : Int)", "Removes the element at index, returning that element."],
	["delete_at", "delete_at(range : Range(Int, Int))", "Removes all elements within the given range."],
	["dup", "dup", "Returns a new Array that has exactly self's elements."],
	["each_permutation", "each_permutation(size : Int = self.size, reuse = false)", "Returns an Iterator over each possible permutation of size of self."],
	["each_permutation", "each_permutation(size : Int = self.size, reuse = false, &block) : Nil", "Yields each possible permutation of size of self."],
	["fill", "fill(from : Int, count : Int, &block)", "Yields each index of self, starting at from and just count times, to the given block and then assigns the block's value in that position."],
	["fill", "fill(from : Int, &block)", "Yields each index of self, starting at from, to the given block and then assigns the block's value in that position."],
	["fill", "fill(range : Range(Int, Int), &block)", "Yields each index of self, in the given range, to the given block and then assigns the block's value in that position."],
	["fill", "fill(&block)", "Yields each index of self to the given block and then assigns the block's value in that position."],
	["fill", "fill(value : T, from : Int, count : Int)", "Replaces every element in self, starting at from and only count times, with the given value."],
	["fill", "fill(value : T, from : Int)", "Replaces every element in self, starting at from, with the given value."],
	["fill", "fill(value : T, range : Range(Int, Int))", "Replaces every element in range with value."],
	["fill", "fill(value : T)", "Replaces every element in self with the given value."],
	["first", "first(n : Int)", "Returns the first n elements of the array."],
	["flatten", "flatten", "Returns a new Array that is a one-dimensional flattening of self (recursively)."],
	["insert", "insert(index : Int, object : T)", "Insert object before the element at index and shifting successive elements, if any."],
	["last", "last(n : Int)", "Returns the last n elements of the array."],
	["map", "map(&block : T -> U) forall U", "Optimized version of Enumerable#map."],
	["map!", "map!(&block)", "Invokes the given block for each element of self, replacing the element with the value returned by the block."],
	["map_with_index", "map_with_index(&block : T, Int32 -> U) forall U", "Optimized version of Enumerable#map_with_index."],
	["permutations", "permutations(size : Int = self.size)", "Returns an Array with all possible permutations of size."],
	["pop", "pop(&block)", "Removes the last value from self."],
	["pop", "pop", "Removes the last value from self, at index size - 1."],
	["pop", "pop(n : Int)", "Removes the last n values from self, at index size - 1."],
	["pop?", "pop?", "Like #pop, but returns nil if self is empty."],
	["push", "push(*values : T)", "Append multiple values."],
	["push", "push(value : T)", "Append."],
	["reject!", "reject!(&block)", "Modifies self, deleting the elements in the collection for which the passed block returns true."],
	["reverse", "reverse", "Returns an array with all the elements in the collection reversed."],
	["reverse!", "reverse!", "Reverses in-place all the elements of self."],
	["sample", "sample(n : Int, random = Random::DEFAULT)", "Returns n number of random elements from self, using the given random number generator."],
	["select!", "select!(&block)", "Modifies self, keeping only the elements in the collection for which the passed block returns true."],
	["shift", "shift(n : Int)", "Removes the first n values of self, starting at index 0."],
	["shift", "shift", "Removes the first value of self, at index 0."],
	["shuffle", "shuffle(random = Random::DEFAULT)", "Returns an array with all the elements in the collection randomized using the given random number generator."],
	["shuffle!", "shuffle!(random = Random::DEFAULT)", "Modifies self by randomizing the order of elements in the collection using the given random number generator."],
	["size", "size : Int32", "Returns the number of elements in the array."],
	["sort", "sort", "Returns an array with all elements in the collection sorted."],
	["sort!", "sort!", "Modifies self by sorting the elements in the collection."],
	["to_unsafe", "to_unsafe : Pointer(T)", "Returns a pointer to the internal buffer where self's elements are stored."],
	["transpose", "transpose", "Assumes that self is an array of arrays and transposes the rows and columns."],
	["uniq", "uniq", "Returns a new Array by removing duplicate values in self."],
	["uniq", "uniq(&block : T -> _)", "Returns a new Array by removing duplicate values in self, using the block's value for comparison."],
	["uniq!", "uniq!", "Removes duplicate elements from self."],
	["uniq!", "uniq!(&block)", "Removes duplicate elements from self, using the block's value for comparison."],
	["unshift", "unshift(obj : T)", "Prepend."],
	["unshift", "unshift(*values : T)", "Prepend multiple values."],
	["|", "|(other : Array(U)) forall U", "Set union: returns a new Array by joining self with other, excluding any duplicates, and preserving the order from self."],
	["combinations", "combinations(size : Int = self.size)", ""],
	["each_combination", "each_combination(size : Int = self.size, reuse = false)", ""],
	["each_combination", "each_combination(size : Int = self.size, reuse = false, &block) : Nil", ""],
	["each_repeated_combination", "each_repeated_combination(size : Int = self.size, reuse = false, &block) : Nil", ""],
	["each_repeated_combination", "each_repeated_combination(size : Int = self.size, reuse = false)", ""],
	["each_repeated_permutation", "each_repeated_permutation(size : Int = self.size, reuse = false, &block) : Nil", ""],
	["pretty_print", "pretty_print(pp) : Nil", ""],
	["product", "product(enumerable : Enumerable, &block)", ""],
	["product", "product(ary : Array(U)) forall U", ""],
	["repeated_combinations", "repeated_combinations(size : Int = self.size)", ""],
	["repeated_permutations", "repeated_permutations(size : Int = self.size)", ""],
	["replace", "replace(other : Array)", ""],
	["rotate", "rotate(n = 1)", ""],
	["rotate!", "rotate!(n = 1)", ""],
	["shift", "shift(&block)", ""],
	["shift?", "shift?", ""],
	["sort", "sort(&block : T, T -> Int32)", ""],
	["sort!", "sort!(&block : T, T -> Int32)", ""],
	["sort_by", "sort_by(&block : T -> _)", ""],
	["sort_by!", "sort_by!(&block : T -> _)", ""],
	["swap", "swap(index0, index1)", ""],
	["to_a", "to_a", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_s", "to_s(io : IO)", ""],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", ""],
	["unsafe_at", "unsafe_at(index : Int)", ""],
	["update", "update(index : Int, &block)", ""]
]
export const HASH_METHODS = [
	["zip", "zip(ary1 : Array(K), ary2 : Array(V))", "Zips two arrays into a Hash, taking keys from ary1 and values from ary2.", 5],
	["==", "==(other : Hash)", "Compares with other.", 5],
	["[]", "[](key)", "See also: Hash#fetch.", 5],
	["[]=", "[]=(key : K, value : V)", "Sets the value of key to the given value.", 5],
	["[]?", "[]?(key)", "Returns the value for the key given by key.", 5],
	["clear", "clear", "Empties a Hash and returns it.", 5],
	["clone", "clone", "Similar to #dup, but duplicates the values as well.", 5],
	["compact", "compact", "Returns new Hash without nil values.", 5],
	["compact!", "compact!", "Removes all nil value from self.", 5],
	["delete", "delete(key)", "Deletes the key-value pair and returns the value, otherwise returns nil.", 5],
	["delete", "delete(key, &block)", "Deletes the key-value pair and returns the value, else yields key with given block.", 5],
	["delete_if", "delete_if(&block)", "Deletes each key-value pair for which the given block returns true.", 5],
	["dup", "dup", "Duplicates a Hash.", 5],
	["each", "each", "Returns an iterator over the hash entries.", 5],
	["each", "each(&block) : Nil", "Calls the given block for each key-value pair and passes in the key and the value.", 5],
	["each_key", "each_key", "Returns an iterator over the hash keys.", 5],
	["each_key", "each_key(&block)", "Calls the given block for each key-value pair and passes in the key.", 5],
	["each_value", "each_value(&block)", "Calls the given block for each key-value pair and passes in the value.", 5],
	["each_value", "each_value", "Returns an iterator over the hash values.", 5],
	["empty?", "empty?", "Returns true when hash contains no key-value pairs.", 5],
	["fetch", "fetch(key, &block)", "Returns the value for the key given by key, or when not found calls the given block with the key.", 5],
	["fetch", "fetch(key, default)", "Returns the value for the key given by key, or when not found the value given by default.", 5],
	["fetch", "fetch(key)", "Returns the value for the key given by key.", 5],
	["first_key", "first_key", "Returns the first key in the hash.", 5],
	["first_key?", "first_key?", "Returns the first key if it exists, or returns nil.", 5],
	["first_value", "first_value", "Returns the first value in the hash.", 5],
	["first_value?", "first_value?", "Similar to #first_key?, but returns its value.", 5],
	["has_key?", "has_key?(key)", "Returns true when key given by key exists, otherwise false.", 5],
	["has_value?", "has_value?(val)", "Returns true when value given by value exists, otherwise false.", 5],
	["hash", "hash", "See also: Object#hash.", 5],
	["invert", "invert", "Inverts keys and values.", 5],
	["key", "key(value)", "Returns the first key with the given value, else raises KeyError.", 5],
	["key", "key(value, &block)", "Returns the first key with the given value, else yields value with the given block.", 5],
	["key?", "key?(value)", "Returns the first key with the given value, else nil.", 5],
	["key_index", "key_index(key)", "Returns the index of the given key, or nil when not found.", 5],
	["keys", "keys", "Returns a new Array with all the keys.", 5],
	["merge", "merge(other : Hash(L, W)) forall L, W", "Returns a new Hash with the keys and values of this hash and other combined.", 5],
	["merge!", "merge!(other : Hash)", "Similar to #merge, but the receiver is modified.", 5],
	["reject", "reject(*keys)", "Returns a new Hash without the given keys.", 5],
	["reject", "reject(&block : K, V -> _)", "Returns a new hash consisting of entries for which the block returns false.", 5],
	["reject!", "reject!(&block : K, V -> _)", "Equivalent to Hash#reject, but makes modification on the current object rather that returning a new one.", 5],
	["reject!", "reject!(keys : Array | Tuple)", "Removes a list of keys out of hash.", 5],
	["select", "select(&block : K, V -> _)", "Returns a new hash consisting of entries for which the block returns true.", 5],
	["select", "select(keys : Array | Tuple)", "Returns a new Hash with the given keys.", 5],
	["select!", "select!(&block : K, V -> _)", "Equivalent to Hash#select but makes modification on the current object rather that returning a new one.", 5],
	["select!", "select!(keys : Array | Tuple)", "Removes every element except the given ones.", 5],
	["shift", "shift(&block)", "Deletes and returns the first key-value pair in the hash.", 5],
	["shift", "shift", "Deletes and returns the first key-value pair in the hash, or raises IndexError if the hash is empty.", 5],
	["shift?", "shift?", "Same as #shift, but returns nil if the hash is empty.", 5],
	["to_h", "to_h", "Returns self.", 5],
	["to_s", "to_s(io : IO)", "Converts to a String.", 5],
	["values", "values", "Returns only the values as an Array.", 5],
	["values_at", "values_at(*indexes : K)", "Returns a tuple populated with the elements at the given indexes.", 5]
]
export const RANGE_METHODS = [
	["===", "===(value)", "Same as #includes?, useful for the case expression."],
	["begin", "begin : B", "Returns the object that defines the beginning of this range."],
	["bsearch", "bsearch(&block)", "By using binary search, returns the first value for which the passed block returns true."],
	["clone", "clone", "Returns a new Range with #begin and #end cloned."],
	["covers?", "covers?(value)", "Same as #includes?."],
	["cycle", "cycle", "Returns an Iterator that cycles over the values of this range."],
	["each", "each(&block) : Nil", "Iterates over the elements of this range, passing each in turn to the block."],
	["each", "each", "Returns an Iterator over the elements of this range."],
	["end", "end : E", "Returns the object that defines the end of the range."],
	["excludes_end?", "excludes_end?", "Returns true if this range excludes the end element."],
	["exclusive?", "exclusive? : Bool", "Returns true if the range is exclusive."],
	["includes?", "includes?(value)", "Returns true if this range includes the given value."],
	["reverse_each", "reverse_each(&block) : Nil", "Iterates over the elements of this range in reverse order, passing each in turn to the block."],
	["reverse_each", "reverse_each", "Returns a reverse Iterator over the elements of this range."],
	["step", "step(by = 1)", "Returns an Iterator that returns each nth element in this range."],
	["step", "step(by = 1, &block)", "Iterates over this range, passing each nth element to the block."],
	["sum", "sum(initial)", "If self is a Int range, it provides O(1) implementation, otherwise it is same as Enumerable#sum."],
]
export const REGEX_METHODS = [
	["error?", "error?(source)", "Determines Regex's source validity."],
	["escape", "escape(str) : String", "Returns a String constructed by escaping any metacharacters in str."],
	["union", "union(patterns : Enumerable(Regex | String)) : self", "Union."],
	["union", "union(*patterns : Regex | String) : self", "Union."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""]
]
export const TUPLE_METHODS = [
	["join", "join(separator, io)", "Prints to io all the elements in the collection, separated by separator.", 5],
	["join", "join(separator = \"\")", "Returns a String created by concatenating the elements in the collection, separated by separator (defaults to none).", 5],
	["join", "join(separator, io, &block)", "Prints to io the concatenation of the elements, with the possibility of controlling how the printing is done via a block.", 5],
	["join", "join(separator = \"\", &block)", "Returns a String created by concatenating the results of passing the elements in the collection to the passed block, separated by separator (defaults to none).", 5],
	["from", "from(array : Array)", "Creates a tuple from the given array, with elements casted to the given types."],
	["+", "+(other : Tuple)", "Returns a tuple that contains self's elements followed by other's elements."],
	["<=>", "<=>(other : self)", "Implements the comparison operator."],
	["<=>", "<=>(other : Tuple)", "Implements the comparison operator."],
	["==", "==(other : self)", "Returns true if this tuple has the same size as the other tuple and their elements are equal to each other when compared with #==."],
	["==", "==(other : Tuple)", "Returns true if this tuple has the same size as the other tuple and their elements are equal to each other when compared with #==."],
	["===", "===(other : self)", "Returns true if case equality holds for the elements in self and other."],
	["===", "===(other : Tuple)", "Returns true if self and other have the same size and case equality holds for the elements in self and other."],
	["[]", "[](index : Int)", "Returns the element at the given index."],
	["[]?", "[]?(index : Int)", "Returns the element at the given index or nil if out of bounds."],
	["at", "at(index : Int)", "Returns the element at the given index or raises IndexError if out of bounds."],
	["at", "at(index : Int, &block)", "Returns the element at the given index or the value returned by the block if out of bounds."],
	["clone", "clone", "Returns a tuple containing cloned elements of this tuple using the #clone method."],
	["each", "each(&block) : Nil", "Yields each of the elements in this tuple."],
	["first", "first", "Returns the first element of this tuple."],
	["first?", "first?", "Returns the first element of this tuple, or nil if this is the empty tuple."],
	["from", "from(array : Array)", "Expects to be called on a tuple of types, creates a tuple from the given array, with types casted appropriately."],
	["hash", "hash", "Returns a hash value based on this tuple's length and contents."],
	["inspect", "inspect", "Same as #to_s."],
	["last", "last", "Returns the last element of this tuple."],
	["last?", "last?", "Returns the last element of this tuple, or nil if this is the empty tuple."],
	["map", "map(&block)", "Returns a new tuple where elements are mapped by the given block."],
	["reverse", "reverse", "Returns a new tuple where the elements are in reverse order."],
	["reverse_each", "reverse_each(&block)", "Yields each of the elements in this tuple in reverse order."],
	["size", "size", "Returns the number of elements in this tuple."],
	["to_s", "to_s(io)", "Appends a string representation of this tuple to the given IO."],
	["types", "types", "Returns the types of this tuple."],
	["==", "==(other)", ""],
	["pretty_print", "pretty_print(pp) : Nil", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", ""],
	["unsafe_at", "unsafe_at(index : Int)", ""]
]
export const NAMEDTUPLE_METHODS = [
	["from", "from(hash : Hash)", "Creates a named tuple from the given hash, with elements casted to the given types."],
	["==", "==(other : NamedTuple)", "Returns true if this tuple has the same keys as other, and values for each key are the same in self and other."],
	["==", "==(other : self)", "Returns true if this tuple has the same keys as other, and values for each key are the same in self and other."],
	["[]", "[](key : Symbol | String)", "Returns the value for the given key, if there's such key, otherwise raises KeyError."],
	["[]?", "[]?(key : Symbol | String)", "Returns the value for the given key, if there's such key, otherwise returns nil."],
	["clone", "clone", "Returns a named tuple with the same keys but with cloned values, using the #clone method."],
	["each", "each(&block) : Nil", "Yields each key and value in this named tuple."],
	["each_key", "each_key(&block) : Nil", "Yields each key in this named tuple."],
	["each_value", "each_value(&block) : Nil", "Yields each value in this named tuple."],
	["each_with_index", "each_with_index(offset = 0, &block)", "Yields each key and value, together with an index starting at offset, in this named tuple."],
	["empty?", "empty?", "Returns true if this named tuple is empty."],
	["fetch", "fetch(key : Symbol | String, default_value)", "Returns the value for the given key, if there's such key, otherwise returns default_value."],
	["fetch", "fetch(key : Symbol, &block)", "Returns the value for the given key, if there's such key, otherwise the value returned by the block."],
	["fetch", "fetch(key : String, &block)", "Returns the value for the given key, if there's such key, otherwise the value returned by the block."],
	["from", "from(hash : Hash)", "Expects to be called on a named tuple whose values are types, creates a tuple from the given hash, with types casted appropriately."],
	["has_key?", "has_key?(key : String) : Bool", "Returns true if this named tuple has the given key, false otherwise."],
	["has_key?", "has_key?(key : Symbol) : Bool", "Returns true if this named tuple has the given key, false otherwise."],
	["hash", "hash", "Returns a hash value based on this name tuple's size, keys and values."],
	["inspect", "inspect", "Same as #to_s."],
	["keys", "keys", "Returns a Tuple of symbols with the keys in this named tuple."],
	["map", "map(&block)", "Returns an Array populated with the results of each iteration in the given block, which is given each key and value in this named tuple."],
	["size", "size", "Returns the number of elements in this named tuple."],
	["to_a", "to_a", "Returns a new Array of tuples populated with each key-value pair."],
	["to_h", "to_h", "Returns a Hash with the keys and values in this named tuple."],
	["to_s", "to_s(io)", "Appends a string representation of this named tuple to the given IO."],
	["values", "values", "Returns a Tuple with the values in this named tuple."],
	["pretty_print", "pretty_print(pp)", ""],
	["to_json", "to_json(json : JSON::Builder)", ""],
	["to_yaml", "to_yaml(yaml : YAML::Builder)", ""]
]
export const PROC_METHODS = [
	["==", "==(other : self)", ""],
	["===", "===(other : self)", ""],
	["===", "===(other)", ""],
	["clone", "clone", ""],
	["closure?", "closure?", ""],
	["closure_data", "closure_data", ""],
	["hash", "hash", ""],
	["pointer", "pointer", ""],
	["to_s", "to_s(io)", ""],
	["arity", "arity", "Returns the number of arguments of this Proc."],
	["call", "call(*args : *T) : R", "Invokes this Proc and returns the result."],
	["partial", "partial(*args : *U) forall U", "Returns a new Proc that has its first arguments fixed to the values given by args."]
]
export const TOP_LEVEL_METHODS = [
	["`", "`(command) : String", "Returns the standard output of executing command in a subshell."],
	["abort", "abort(message, status = 1) : NoReturn", "Terminates execution immediately, printing message to STDERR and then calling exit(status)."],
	["at_exit", "at_exit(&handler : Int32 -> ) : Nil", "Registers the given Proc for execution when the program exits."],
	["delay", "delay(delay, &block : -> _)", "Spawns a Fiber to compute &block in the background after delay has elapsed."],
	["exit", "exit(status = 0) : NoReturn", "Terminates execution immediately, returning the given status code to the invoking environment."],
	["fork", "fork", "See also: Process.fork"],
	["fork", "fork(&block)", "See also: Process.fork"],
	["future", "future(&exp : -> _)", "Spawns a Fiber to compute &block in the background."],
	["gets", "gets(*args, **options)", "Reads a line from STDIN."],
	["lazy", "lazy(&block : -> _)", "Conditionally spawns a Fiber to run &block in the background."],
	["loop", "loop(&block)", "Repeatedly executes the block, passing an incremental Int32 that starts with 0."],
	["p", "p(*objects)", "Pretty prints each object in objects to STDOUT, followed by a newline."],
	["p", "p", "Pretty prints each object in objects to STDOUT, followed by a newline."],
	["p", "p(object)", "Pretty prints object to STDOUT followed by a newline."],
	["print", "print(*objects : _) : Nil", "Prints objects to STDOUT and then invokes STDOUT.flush."],
	["printf", "printf(format_string, args : Array | Tuple) : Nil", "Prints a formatted string to STDOUT."],
	["printf", "printf(format_string, *args) : Nil", "Prints a formatted string to STDOUT."],
	["puts", "puts(*objects) : Nil", "Prints objects to STDOUT, each followed by a newline."],
	["rand", "rand(x)", "See Random#rand(x)."],
	["rand", "rand", "See Random#rand."],
	["read_line", "read_line(*args, **options)", "Reads a line from STDIN."],
	["sleep", "sleep", "Blocks the current fiber forever."],
	["sleep", "sleep(time : Time::Span)", "Blocks the current Fiber for the specified time span."],
	["sleep", "sleep(seconds : Number)", "Blocks the current fiber for the specified number of seconds."],
	["spawn", "spawn(*, name : String? = nil, &block)", "Spawns a new fiber."],
	["sprintf", "sprintf(format_string, *args) : String", "Returns a formatted string."],
	["sprintf", "sprintf(format_string, args : Array | Tuple) : String", "Returns a formatted string."],
	["system", "system(command : String, args = nil) : Bool", "Executes the given command in a subshell."],
	["pp", "pp(*exps)", "Prints a series of expressions together with their values."],
	["record", "record(name, *properties)", "Defines a Struct with the given name and properties."],
	["spawn", "spawn(call, *, name = nil)", "Spawns a fiber by first creating a Proc, passing the call's expressions to it, and letting the Proc finally invoke the call."],
	["caller", "caller", ""],
	["raise", "raise(ex : Exception) : NoReturn", ""],
	["raise", "raise(message : String) : NoReturn", ""],
	["with_color", "with_color(color : Symbol)", ""],
	["with_color", "with_color", ""],
	["assert_responds_to", "assert_responds_to(var, method)", ""],
	["debugger", "debugger", ""],
	["parallel", "parallel(*jobs)", ""],
	["redefine_main", "redefine_main(name = main)", ""]
]
export const STRUCTS = [
	["Atomic", "struct Atomic(T)", ""],
	["BigFloat", "struct BigFloat", ""],
	["BigInt", "struct BigInt", ""],
	["BigRational", "struct BigRational", ""],
	["BitArray", "struct BitArray", ""],
	["Bool", "struct Bool", ""],
	["Char", "struct Char", ""],
	["Complex", "struct Complex", ""],
	["Enum", "abstract struct Enum", ""],
	["Float", "abstract struct Float", ""],
	["Float32", "struct Float32", ""],
	["Float64", "struct Float64", ""],
	["Int", "abstract struct Int", ""],
	["Int16", "struct Int16", ""],
	["Int32", "struct Int32", ""],
	["Int64", "struct Int64", ""],
	["Int8", "struct Int8", ""],
	["NamedTuple", "struct NamedTuple(**T)", ""],
	["Nil", "struct Nil", ""],
	["Number", "abstract struct Number", ""],
	["Pointer", "struct Pointer(T)", ""],
	["Proc", "struct Proc(*T, R)", ""],
	["Range", "struct Range(B, E)", ""],
	["Reflect", "struct Reflect(X)", ""],
	["Set", "struct Set(T)", ""],
	["Slice", "struct Slice(T)", ""],
	["StaticArray", "struct StaticArray(T, N)", ""],
	["Struct", "abstract struct Struct", ""],
	["Symbol", "struct Symbol", ""],
	["Time", "struct Time", ""],
	["Toplevel", "Top Level Namespace", ""],
	["Tuple", "struct Tuple(*T)", ""],
	["Uint16", "struct UInt16", ""],
	["Uint32", "struct UInt32", ""],
	["Uint64", "struct UInt64", ""],
	["Uint8", "struct UInt8", ""],
	["Union", "struct Union(*T)", ""],
	["Value", "abstract struct Value", ""]
]
export const FILE_METHODS = [
	["basename", "basename(path) : String", "Returns the last component of the given path."],
	["basename", "basename(path, suffix) : String", "Returns the last component of the given path."],
	["chmod", "chmod(path, mode : Int)", "Changes the permissions of the specified file."],
	["chown", "chown(path, uid : Int? = -1, gid : Int = -1, follow_symlinks = false)", "Changes the owner of the specified file."],
	["delete", "delete(path)", "Delete the file at path."],
	["directory?", "directory?(path) : Bool", "Returns true if the given path exists and is a directory."],
	["dirname", "dirname(path) : String", "Returns all components of the given path except the last one."],
	["each_line", "each_line(filename, encoding = nil, invalid = nil, chomp = true, &block)", "Yields each line in filename to the given block."],
	["each_line", "each_line(filename, encoding = nil, invalid = nil, chomp = true)", "Returns an Iterator for each line in filename."],
	["empty?", "empty?(path) : Bool", "Returns true if the file at path is empty, otherwise returns false."],
	["executable?", "executable?(path) : Bool", "Returns true if path is executable by the real user id of this process else returns false."],
	["exists?", "exists?(path) : Bool", "Returns true if path exists else returns false"],
	["expand_path", "expand_path(path, dir = nil) : String", "Converts path to an absolute path."],
	["extname", "extname(filename) : String", "Returns filename's extension, or an empty string if it has no extension."],
	["file?", "file?(path) : Bool", "Returns true if given path exists and is a file."],
	["join", "join(parts : Array | Tuple) : String", "Returns a new string formed by joining the strings using File::SEPARATOR."],
	["join", "join(*parts) : String", "Returns a new string formed by joining the strings using File::SEPARATOR."],
	["link", "link(old_path, new_path)", "Creates a new link (also known as a hard link) at new_path to an existing file given by old_path."],
	["lstat", "lstat(path) : Stat", "Returns a File::Stat object for the file given by path or raises Errno in case of an error."],
	["open", "open(filename, mode = 'r', perm = DEFAULT_CREATE_MODE, encoding = nil, invalid = nil, &block)", "Opens the file named by filename."],
	["read", "read(filename, encoding = nil, invalid = nil) : String", "Returns the content of filename as a string."],
	["read_lines", "read_lines(filename, encoding = nil, invalid = nil, chomp = true) : Array(String)", "Returns all lines in filename as an array of strings."],
	["readable?", "readable?(path) : Bool", "Returns true if path is readable by the real user id of this process else returns false."],
	["real_path", "real_path(path) : String", "Resolves the real path of path by following symbolic links."],
	["rename", "rename(old_filename, new_filename)", "Moves old_filename to new_filename."],
	["size", "size(filename) : UInt64", "Returns the size of filename bytes."],
	["stat", "stat(path) : Stat", "Returns a File::Stat object for the file given by path or raises Errno in case of an error."],
	["symlink", "symlink(old_path, new_path)", "Creates a symbolic link at new_path to an existing file given by *old_path."],
	["symlink?", "symlink?(path) : Bool", "Returns true if the path is a symbolic link."],
	["touch", "touch(filename : String, time : Time = Time.now)", "Attempts to set the access and modification times of the file named in the filename parameter to the value given in time."],
	["utime", "utime(atime : Time, mtime : Time, filename : String) : Nil", "Sets the access and modification times of filename."],
	["writable?", "writable?(path) : Bool", "Returns true if path is writable by the real user id of this process else returns false."],
	["write", "write(filename, content, perm = DEFAULT_CREATE_MODE, encoding = nil, invalid = nil)", "Write the given content to filename."]
]
export const DIR_METHODS = [
	["cd", "cd(path)", "Changes the current working directory of the process to the given string."],
	["cd", "cd(path, &block)", "Changes the current working directory of the process to the given string and invokes the block, restoring the original working directory when the block exits."],
	["current", "current : String", "Returns the current working directory."],
	["empty?", "empty?(path) : Bool", "Returns true if the directory at path is empty, otherwise returns false."],
	["entries", "entries(dirname) : Array(String)", "Returns an array containing all of the filenames in the given directory."],
	["exists?", "exists?(path) : Bool", "Returns true if the given path exists and is a directory"],
	["foreach", "foreach(dirname, &block)", "Calls the block once for each entry in the named directory, passing the filename of each entry as a parameter to the block."],
	["mkdir", "mkdir(path, mode = 511)", "Creates a new directory at the given path."],
	["mkdir_p", "mkdir_p(path, mode = 511)", "Creates a new directory at the given path, including any non-existing intermediate directories."],
	["open", "open(path, &block)", "Opens a directory and yields it, closing it at the end of the block."],
	["rmdir", "rmdir(path)", "Removes the directory at the given path."],
	["[]", "[](*patterns) : Array(String)", ""],
	["[]", "[](patterns : Enumerable(String)) : Array(String)", ""],
	["glob", "glob(patterns : Enumerable(String), &block)", ""],
	["glob", "glob(*patterns) : Array(String)", ""],
	["glob", "glob(patterns : Enumerable(String)) : Array(String)", ""],
	["glob", "glob(*patterns, &block)", ""]
]
export const CHANNEL_METHODS = [
	["close", "close", ""],
	["closed?", "closed?", ""],
	["inspect", "inspect(io)", ""],
	["pretty_print", "pretty_print(pp)", ""],
	["receive", "receive", ""],
	["receive?", "receive?", ""],
	["receive_select_action", "receive_select_action", ""],
	["send_select_action", "send_select_action(value : T)", ""],
	["unwait_for_receive", "unwait_for_receive", ""],
	["unwait_for_send", "unwait_for_send", ""],
	["wait_for_receive", "wait_for_receive", ""],
	["wait_for_send	", "wait_for_send	", ""]
]
export const CLASSES = [
	["Argumenterror", "class ArgumentError", ""],
	["Array", "class Array(T)", ""],
	["Box", "class Box(T)", ""],
	["Channel", "abstract class Channel(T)", ""],
	["Class", "abstract class Class", ""],
	["Csv", "class CSV", ""],
	["Deque", "class Deque(T)", ""],
	["Dir", "class Dir", ""],
	["Divisionbyzero", "class DivisionByZero", ""],
	["Errno", "class Errno", ""],
	["Exception", "class Exception", ""],
	["Fiber", "class Fiber", ""],
	["File", "class File", ""],
	["Hash", "class Hash(K, V)", ""],
	["Indexerror", "class IndexError", ""],
	["Ini", "class INI", ""],
	["Invalidbytesequenceerror", "class InvalidByteSequenceError", ""],
	["Ipsocket", "class IPSocket", ""],
	["Keyerror", "class KeyError", ""],
	["Logger", "class Logger", ""],
	["Markdown", "class Markdown", ""],
	["Mutex", "class Mutex", ""],
	["Object", "abstract class Object", ""],
	["Optionparser", "class OptionParser", ""],
	["Prettyprint", "class PrettyPrint", ""],
	["Process", "class Process", ""],
	["Reference", "class Reference", ""],
	["Regex", "class Regex", ""],
	["Socket", "class Socket", ""],
	["String", "class String", ""],
	["Stringpool", "class StringPool", ""],
	["Stringscanner", "class StringScanner", ""],
	["Tcpserver", "class TCPServer", ""],
	["Tcpsocket", "class TCPSocket", ""],
	["Tempfile", "class Tempfile", ""],
	["Typecasterror", "class TypeCastError", ""],
	["Udpsocket", "class UDPSocket", ""],
	["Unixserver", "class UNIXServer", ""],
	["Unixsocket", "class UNIXSocket", ""],
	["Uri", "class URI", ""],
	["Weakref", "class WeakRef(T)", ""]
]
export const MODULES = [
	["Adler32", "module Adler32", ""],
	["Base64", "module Base64", ""],
	["Benchmark", "module Benchmark", ""],
	["Colorize", "module Colorize", ""],
	["Comparable", "module Comparable(T)", ""],
	["Concurrent", "module Concurrent", ""],
	["Crc32", "module CRC32", ""],
	["Crypto", "module Crypto", ""],
	["Crystal", "module Crystal", ""],
	["Digest", "module Digest", ""],
	["Dl", "module DL", ""],
	["Ecr", "module ECR", ""],
	["Enumerable", "module Enumerable(T)", ""],
	["Env", "module ENV", ""],
	["Fileutils", "module FileUtils", ""],
	["Flate", "module Flate", ""],
	["Gc", "module GC", ""],
	["Gzip", "module Gzip", ""],
	["Html", "module HTML", ""],
	["Http", "module HTTP", ""],
	["Indexable", "module Indexable(T)", ""],
	["Io", "module IO", ""],
	["Iterable", "module Iterable(T)", ""],
	["Iterator", "module Iterator(T)", ""],
	["Json", "module JSON", ""],
	["Levenshtein", "module Levenshtein", ""],
	["Llvm", "module LLVM", ""],
	["Math", "module Math", ""],
	["Oauth", "module OAuth", ""],
	["Oauth2", "module OAuth2", ""],
	["Openssl", "module OpenSSL", ""],
	["Partialcomparable", "module PartialComparable(T)", ""],
	["Random", "module Random", ""],
	["Readline", "module Readline", ""],
	["Securerandom", "module SecureRandom", ""],
	["Spec", "module Spec", ""],
	["System", "module System", ""],
	["Termios", "module Termios", ""],
	["Unicode", "module Unicode", ""],
	["Xml", "module XML", ""],
	["Yaml", "module YAML", ""],
	["Zip", "module Zip", ""],
	["Zlib", "module Zlib", ""]
]
export const ALIAS = [
	["Bytes", "alias Bytes", ""]
]
export const ENUMS = [
	["Signal", "enum Signal", ""]
]
